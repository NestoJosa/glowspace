{"ast":null,"code":"var _jsxFileName = \"/Users/nestos/Desktop/Code/glowspace/src/components/Search/SearchForm/SearchFormContainer.js\";\n// SearchFormContainer.js\nimport React, { Component } from \"react\";\nimport SearchForm from './SearchForm'; // Import the icons\n\nimport iconHair from \"../../../assets/icons/hair.svg\";\nimport iconFace from \"../../../assets/icons/face.svg\";\nimport iconHand from \"../../../assets/icons/hand.svg\";\nimport iconBody from \"../../../assets/icons/body.svg\";\nimport iconFeet from \"../../../assets/icons/feet.svg\"; // Create an object for the labels in different languages\n\nlet treatmentAreas = {\n  eng: ['Hair', 'Face', 'Hands', 'Body', 'Feet'],\n  dk: ['Hår', 'Ansigt', 'Hænder', 'Krop', 'Fødder']\n}; // WARNING: currently it will not work to change the language settings \n\nlet locale = 'dk'; // Create an object for the labelData\n\nconst labelData = {\n  hair: {\n    label: treatmentAreas[locale][0],\n    isActive: true,\n    icon: iconHair\n  },\n  face: {\n    label: treatmentAreas[locale][1],\n    isActive: true,\n    icon: iconFace\n  },\n  hands: {\n    label: treatmentAreas[locale][2],\n    isActive: true,\n    icon: iconHand\n  },\n  body: {\n    label: treatmentAreas[locale][3],\n    isActive: true,\n    icon: iconBody\n  },\n  feet: {\n    label: treatmentAreas[locale][4],\n    isActive: true,\n    icon: iconFeet\n  }\n};\n\nclass SearchFormContainer extends Component {\n  constructor(props) {\n    super(props); // Set the initial default values\n\n    this.state = {\n      [labelData['hair'].label]: labelData['hair'].isActive,\n      [labelData['face'].label]: labelData['face'].isActive,\n      [labelData['hands'].label]: labelData['hands'].isActive,\n      [labelData['body'].label]: labelData['body'].isActive,\n      [labelData['feet'].label]: labelData['feet'].isActive,\n      from: null,\n      to: null\n    }; // Create a list of labels\n\n    this.labels = Object.keys(this.state).splice(0, 5); // Create a list of icons. \n    // Note: we are looping through the labelData (NOT the state object) \n\n    this.iconsList = Object.entries(labelData).map(currEl => currEl[1].icon); // Binders\n\n    this.handleClick = this.handleClick.bind(this);\n    this.handleDateClick = this.handleDateClick.bind(this);\n    this.handleSubmitClick = this.handleSubmitClick.bind(this);\n  } // this handler is triggered when you click on a treatment-icon\n  // and when you click on a treatment-checkbox\n\n\n  handleClick(clickedTreatmentArea) {\n    this.setState({\n      [clickedTreatmentArea]: !this.state[clickedTreatmentArea]\n    });\n  }\n\n  handleDateClick(e) {\n    this.setState({\n      from: e.from,\n      to: e.to\n    });\n  }\n\n  handleSubmitClick() {\n    this.props.getSearchResults(this.state);\n  }\n\n  render() {\n    // get the checked/unchecked array\n    let treatmentIsActiveArr = Object.values(this.state).slice(0, 5); // Get a list of the active treatments for the Dropdown\n\n    let activeTreatments = formatActiveTreatments(getActiveTreatmentsList(this.state));\n    return /*#__PURE__*/React.createElement(SearchForm // props for the treatmentIconButtonList\n    // pass the labels array\n    , {\n      labels: this.labels,\n      activeLabels: activeTreatments,\n      isActiveArray: treatmentIsActiveArr // pass the list of icon paths\n      ,\n      icons: this.iconsList,\n      onClick: this.handleClick // pass the method used to get search results\n      ,\n      getSearchResults: this.handleSubmitClick // props for DatePicker\n      ,\n      fromDate: this.state.from,\n      toDate: this.state.to,\n      onDatePick: this.handleDateClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 7\n      }\n    });\n  }\n\n}\n\nexport default SearchFormContainer;\n/* \n\n  Helper Functions\n\n*/\n\nconst getActiveTreatmentsList = obj => {\n  // get an array of the components state key/value pairs,\n  // this will result in an array of nested arrays\n  // and remove the 'from' and 'to' from the array\n  let objectsKeyValPairsArr = Object.entries(obj).slice(0, 5); // initiate an empty array that will store the selected labels only\n\n  const selectedLabelsArray = []; // loop through the objectsKeyValPairsArr (its an array of arrays)\n\n  objectsKeyValPairsArr.forEach((currentElement, i) => {\n    // in the current element ([<label>],[<isChecked>]),\n    // if isChecked is true   \n    if (currentElement[1]) {\n      // then push the label to the selectedLabelsArray\n      selectedLabelsArray.push(currentElement[0]);\n    }\n\n    ;\n  });\n  return selectedLabelsArray;\n}; // helper function, formatActiveTreatments,\n// takes an array contain the selected labels\n// and returns a new array with the formatted labels\n// for the dropdown component\n\n\nconst formatActiveTreatments = arr => {\n  // create a new array where each element has a space before the string,\n  // if not used, the result is: <label>,<label>,<label>\n  let formattedLabels = arr.map(element => \" \" + element);\n  return formattedLabels;\n};","map":{"version":3,"sources":["/Users/nestos/Desktop/Code/glowspace/src/components/Search/SearchForm/SearchFormContainer.js"],"names":["React","Component","SearchForm","treatmentAreas","eng","dk","locale","labelData","hair","label","isActive","icon","iconHair","face","iconFace","hands","iconHand","body","iconBody","feet","iconFeet","SearchFormContainer","constructor","props","state","from","to","labels","Object","keys","splice","iconsList","entries","map","currEl","handleClick","bind","handleDateClick","handleSubmitClick","clickedTreatmentArea","setState","e","getSearchResults","render","treatmentIsActiveArr","values","slice","activeTreatments","formatActiveTreatments","getActiveTreatmentsList","obj","objectsKeyValPairsArr","selectedLabelsArray","forEach","currentElement","i","push","arr","formattedLabels","element"],"mappings":"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","sourcesContent":["// SearchFormContainer.js\n\nimport React, { Component } from \"react\";\nimport SearchForm from './SearchForm';\n\n// Import the icons\nimport iconHair from '../../../assets/icons/hair.svg';\nimport iconFace from '../../../assets/icons/face.svg';\nimport iconHand from '../../../assets/icons/hand.svg';\nimport iconBody from '../../../assets/icons/body.svg';\nimport iconFeet from '../../../assets/icons/feet.svg';\n\n// Create an object for the labels in different languages\nlet treatmentAreas = {\n  eng: ['Hair', 'Face', 'Hands', 'Body', 'Feet'],\n  dk: ['Hår', 'Ansigt', 'Hænder', 'Krop', 'Fødder'],\n}\n\n// WARNING: currently it will not work to change the language settings \nlet locale = 'dk';\n\n// Create an object for the labelData\nconst labelData = {\n  hair: {\n    label: treatmentAreas[locale][0],\n    isActive: true,\n    icon: iconHair,\n  },\n  face: {\n    label: treatmentAreas[locale][1],\n    isActive: true,\n    icon: iconFace,\n  },\n  hands: {\n    label: treatmentAreas[locale][2],\n    isActive: true,\n    icon: iconHand,\n  },\n  body: {\n    label: treatmentAreas[locale][3],\n    isActive: true,\n    icon: iconBody,\n  },\n  feet: {\n    label: treatmentAreas[locale][4],\n    isActive: true,\n    icon: iconFeet,\n  },\n}\n\nclass SearchFormContainer extends Component {\n  constructor(props) {\n    super(props);\n\n    // Set the initial default values\n    this.state = {\n      [labelData['hair'].label]:  labelData['hair'].isActive,\n      [labelData['face'].label]:  labelData['face'].isActive,\n      [labelData['hands'].label]: labelData['hands'].isActive,\n      [labelData['body'].label]:  labelData['body'].isActive,\n      [labelData['feet'].label]:  labelData['feet'].isActive,\n      from: null,\n      to: null, \n    }\n\n    // Create a list of labels\n    this.labels = Object.keys(this.state).splice(0, 5);\n\n    // Create a list of icons. \n    // Note: we are looping through the labelData (NOT the state object) \n    this.iconsList = Object.entries(labelData).map( currEl => currEl[1].icon);\n\n    // Binders\n    this.handleClick = this.handleClick.bind(this);\n    this.handleDateClick = this.handleDateClick.bind(this);\n    this.handleSubmitClick = this.handleSubmitClick.bind(this);\n  }\n\n  // this handler is triggered when you click on a treatment-icon\n  // and when you click on a treatment-checkbox\n  handleClick(clickedTreatmentArea) {\n    this.setState({ [clickedTreatmentArea]: !this.state[clickedTreatmentArea] });\n  }\n\n  handleDateClick(e) {\n    this.setState({\n      from: e.from,\n      to: e.to\n    });\n  }\n\n  handleSubmitClick() {\n    this.props.getSearchResults(this.state); \n  }\n\n  render() {\n\n    // get the checked/unchecked array\n    let treatmentIsActiveArr = Object.values(this.state).slice(0,5)\n\n    // Get a list of the active treatments for the Dropdown\n    let activeTreatments = formatActiveTreatments(getActiveTreatmentsList(this.state));\n\n    return(\n      <SearchForm\n        \n        // props for the treatmentIconButtonList\n        \n        // pass the labels array\n        labels={this.labels}\n        activeLabels={activeTreatments}\n        isActiveArray={treatmentIsActiveArr}\n                \n        // pass the list of icon paths\n        icons={this.iconsList}\n\n        \n        onClick={this.handleClick}\n\n        // pass the method used to get search results\n        getSearchResults={this.handleSubmitClick}\n\n        // props for DatePicker\n        fromDate={this.state.from} \n        toDate={this.state.to}\n        onDatePick={this.handleDateClick} \n      />\n    )\n  }\n}\n\nexport default SearchFormContainer;\n\n\n\n\n\n/* \n\n  Helper Functions\n\n*/\n\n\nconst getActiveTreatmentsList = obj => {\n  // get an array of the components state key/value pairs,\n  // this will result in an array of nested arrays\n  // and remove the 'from' and 'to' from the array\n  let objectsKeyValPairsArr = Object.entries(obj).slice(0,5)\n\n  // initiate an empty array that will store the selected labels only\n  const selectedLabelsArray = [];\n\n  // loop through the objectsKeyValPairsArr (its an array of arrays)\n  objectsKeyValPairsArr.forEach( (currentElement, i) => {\n    // in the current element ([<label>],[<isChecked>]),\n    // if isChecked is true   \n    if(currentElement[1]) {\n      // then push the label to the selectedLabelsArray\n      selectedLabelsArray.push(currentElement[0])\n    };\n  });\n\n  return selectedLabelsArray;\n};\n\n// helper function, formatActiveTreatments,\n// takes an array contain the selected labels\n// and returns a new array with the formatted labels\n// for the dropdown component\nconst formatActiveTreatments = arr => {\n  // create a new array where each element has a space before the string,\n  // if not used, the result is: <label>,<label>,<label>\n  let formattedLabels = arr.map( element => \" \" + element);\n\n  return formattedLabels;\n};\n\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/Users/nestos/Desktop/Code/glowspace/src/components/Search/SearchContainer.js\";\nimport React from 'react';\nimport GetSearchString from './GetSearchString/GetSearchString';\nimport Search from './Search';\n\nclass SearchContainer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      searchResults: null,\n      lat: null,\n      lon: null,\n      isLoading: false\n    };\n    this.getSearchResults = this.getSearchResults.bind(this);\n  }\n\n  componentDidMount() {\n    if (navigator.geolocation) {\n      // the arrow-success-func is a required func for the \n      // getCurrentPosition method and takes a position object only\n      navigator.geolocation.getCurrentPosition(position => {\n        this.setState({\n          lat: position.coords.latitude,\n          lon: position.coords.longitude\n        });\n      });\n    }\n\n    ;\n  }\n\n  getSearchResults(searchParams) {\n    // get a formatted string for the api from the passed search params\n    let stringForApi = GetSearchString(searchParams);\n    this.setState({\n      searchResults: null,\n      isLoading: true\n    }, () => {\n      fetch(stringForApi).then(res => res.json()).then(data => {\n        this.setState({\n          searchResults: data,\n          isLoading: false\n        });\n      }) // Log any errors to the console\n      .catch(err => {\n        this.setState({\n          isLoading: false\n        });\n        console.log('Error Log:');\n        console.log(err);\n      });\n    });\n  }\n\n  render() {\n    let coordinates = this.state.lat === !null && this.state.lon === !null ? {\n      'clientLatitude': this.state.lat,\n      'clientLongitude': this.state.lon\n    } : null;\n    return /*#__PURE__*/React.createElement(Search, {\n      getSearchResults: this.getSearchResults,\n      rawSearchResults: this.state.searchResults,\n      clientCoordinates: coordinates,\n      isLoading: this.state.isLoading,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 7\n      }\n    });\n  }\n\n}\n\n;\nexport default SearchContainer;","map":{"version":3,"sources":["/Users/nestos/Desktop/Code/glowspace/src/components/Search/SearchContainer.js"],"names":["React","GetSearchString","Search","SearchContainer","Component","constructor","props","state","searchResults","lat","lon","isLoading","getSearchResults","bind","componentDidMount","navigator","geolocation","getCurrentPosition","position","setState","coords","latitude","longitude","searchParams","stringForApi","fetch","then","res","json","data","catch","err","console","log","render","coordinates"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,eAAP,MAA4B,mCAA5B;AACA,OAAOC,MAAP,MAAmB,UAAnB;;AAEA,MAAMC,eAAN,SAA8BH,KAAK,CAACI,SAApC,CAA8C;AAC5CC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,aAAa,EAAE,IADJ;AAEXC,MAAAA,GAAG,EAAE,IAFM;AAGXC,MAAAA,GAAG,EAAE,IAHM;AAIXC,MAAAA,SAAS,EAAE;AAJA,KAAb;AAMA,SAAKC,gBAAL,GAAwB,KAAKA,gBAAL,CAAsBC,IAAtB,CAA2B,IAA3B,CAAxB;AACD;;AAEDC,EAAAA,iBAAiB,GAAG;AAClB,QAAIC,SAAS,CAACC,WAAd,EAA2B;AACzB;AACA;AACAD,MAAAA,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CAA2CC,QAAD,IAAc;AACtD,aAAKC,QAAL,CAAc;AACZV,UAAAA,GAAG,EAAES,QAAQ,CAACE,MAAT,CAAgBC,QADT;AAEZX,UAAAA,GAAG,EAAEQ,QAAQ,CAACE,MAAT,CAAgBE;AAFT,SAAd;AAID,OALD;AAMD;;AAAA;AACF;;AAGDV,EAAAA,gBAAgB,CAACW,YAAD,EAAe;AAC7B;AACA,QAAIC,YAAY,GAAGvB,eAAe,CAACsB,YAAD,CAAlC;AACA,SAAKJ,QAAL,CAAc;AACZX,MAAAA,aAAa,EAAE,IADH;AAEZG,MAAAA,SAAS,EAAE;AAFC,KAAd,EAGI,MAAM;AACRc,MAAAA,KAAK,CAACD,YAAD,CAAL,CACCE,IADD,CACMC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADb,EAECF,IAFD,CAEOG,IAAD,IAAU;AACd,aAAKV,QAAL,CAAc;AACZX,UAAAA,aAAa,EAAEqB,IADH;AAEZlB,UAAAA,SAAS,EAAE;AAFC,SAAd;AAID,OAPD,EAQA;AARA,OASCmB,KATD,CASSC,GAAD,IAAS;AACf,aAAKZ,QAAL,CAAc;AAAER,UAAAA,SAAS,EAAE;AAAb,SAAd;AACAqB,QAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACAD,QAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACD,OAbD;AAcD,KAlBD;AAmBD;;AAEDG,EAAAA,MAAM,GAAG;AACP,QAAIC,WAAW,GAAG,KAAK5B,KAAL,CAAWE,GAAX,KAAmB,CAAC,IAApB,IAA4B,KAAKF,KAAL,CAAWG,GAAX,KAAmB,CAAC,IAAhD,GACd;AAAE,wBAAkB,KAAKH,KAAL,CAAWE,GAA/B;AAAoC,yBAAmB,KAAKF,KAAL,CAAWG;AAAlE,KADc,GAEd,IAFJ;AAKA,wBACE,oBAAC,MAAD;AACE,MAAA,gBAAgB,EAAE,KAAKE,gBADzB;AAEE,MAAA,gBAAgB,EAAE,KAAKL,KAAL,CAAWC,aAF/B;AAGE,MAAA,iBAAiB,EAAE2B,WAHrB;AAIE,MAAA,SAAS,EAAE,KAAK5B,KAAL,CAAWI,SAJxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAQD;;AAhE2C;;AAiE7C;AAED,eAAeR,eAAf","sourcesContent":["import React from 'react';\nimport GetSearchString from './GetSearchString/GetSearchString';\nimport Search from './Search';\n\nclass SearchContainer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      searchResults: null,\n      lat: null,\n      lon: null,\n      isLoading: false,\n    };\n    this.getSearchResults = this.getSearchResults.bind(this);\n  };\n\n  componentDidMount() {\n    if (navigator.geolocation) {\n      // the arrow-success-func is a required func for the \n      // getCurrentPosition method and takes a position object only\n      navigator.geolocation.getCurrentPosition( (position) => {\n        this.setState({\n          lat: position.coords.latitude,\n          lon: position.coords.longitude,\n        });\n      });\n    };\n  };\n\n  \n  getSearchResults(searchParams) {\n    // get a formatted string for the api from the passed search params\n    let stringForApi = GetSearchString(searchParams);\n    this.setState({\n      searchResults: null,\n      isLoading: true}\n      , () => {\n      fetch(stringForApi)\n      .then(res => res.json())\n      .then((data) => {\n        this.setState({ \n          searchResults: data,\n          isLoading: false\n        });\n      })\n      // Log any errors to the console\n      .catch( (err) => {\n        this.setState({ isLoading: false })\n        console.log('Error Log:')\n        console.log(err)\n      });\n    })    \n  };\n\n  render() {\n    let coordinates = this.state.lat === !null && this.state.lon === !null \n      ? { 'clientLatitude': this.state.lat, 'clientLongitude': this.state.lon }\n      : null\n    ;\n\n    return(\n      <Search \n        getSearchResults={this.getSearchResults}\n        rawSearchResults={this.state.searchResults}\n        clientCoordinates={coordinates}\n        isLoading={this.state.isLoading}\n      />\n    );\n  };\n};\n\nexport default SearchContainer;\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/Users/nestos/Desktop/Code/glowspace/src/components/Search/SearchForm/SearchForm.js\";\n// SearchForm.js\nimport React from 'react';\nimport TreatmentButtonsList from '../TreatmentButtonsList/TreatmentButtonsList';\n\nconst SearchForm = props => {\n  // #refactor!\n  // get the boolean values from the this.state object\n  // that will be passed to the children components\n  // and slice to remove the from and date values (this is not the most ideal solution\n  // because the slice will run everytime the render function runs, it would be better \n  // to handle this in the constructor, by setting two object in the state - one for \n  // the treatment and labels, and another for the dates )\n  // get the checked/unchecked array\n  let checkedUncheckedValuesArrray = Object.values(props.currState).slice(0, 5);\n  console.log('checkedUncheckedValuesArrray:');\n  console.log(checkedUncheckedValuesArrray); // get an array contain only the selected formatted labels\n  // that will be passed to the Dropwdown component\n  // and used by the component to output the chosen treatment(s)\n\n  let chosenLabels = formatSelectedLabels(getSelectedLabels(props.currState));\n  console.log('chosenLabels:');\n  console.log(chosenLabels);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"StartSearch-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(TreatmentButtonsList, {\n    labels: props.labels,\n    isChecked: checkedUncheckedValuesArrray,\n    onClick: props.onClick,\n    icons: props.icons,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default SearchForm;\n/* \n\n  Helper Functions\n\n*/\n// takes the state object and returns an array,\n// that contains the chosen treatments - \n// treatments with a value of true\n\nconst getSelectedLabels = obj => {\n  // get an array of the components state key/value pars,\n  // this will result in an array of nested arrays\n  // and remove the 'from' and 'to' from the array\n  let objectsKeyValPairsArr = Object.entries(obj).slice(0, 5); // initiate an empty array that will store the selected labels only\n\n  const selectedLabelsArray = []; // loop through the objectsKeyValPairsArr (its an array of arrays)\n\n  objectsKeyValPairsArr.forEach((currentElement, i) => {\n    // in the current element ([<label>],[<isChecked>]),\n    // if isChecked is true   \n    if (currentElement[1]) {\n      // then push the label to the selectedLabelsArray\n      selectedLabelsArray.push(currentElement[0]);\n    }\n\n    ;\n  });\n  return selectedLabelsArray;\n}; // helper function, formatSelectedLabels,\n// takes an array contain the selected labels\n// and returns a new array with the formatted labels\n// for the dropdown component\n\n\nconst formatSelectedLabels = arr => {\n  // create a new array where each element has a space before the string,\n  // if not used, the result is: <label>,<label>,<label>\n  let formattedLabels = arr.map(element => \" \" + element);\n  return formattedLabels;\n};","map":{"version":3,"sources":["/Users/nestos/Desktop/Code/glowspace/src/components/Search/SearchForm/SearchForm.js"],"names":["React","TreatmentButtonsList","SearchForm","props","checkedUncheckedValuesArrray","Object","values","currState","slice","console","log","chosenLabels","formatSelectedLabels","getSelectedLabels","labels","onClick","icons","obj","objectsKeyValPairsArr","entries","selectedLabelsArray","forEach","currentElement","i","push","arr","formattedLabels","map","element"],"mappings":";AAAA;AAEA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,oBAAP,MAAiC,8CAAjC;;AAEA,MAAMC,UAAU,GAAGC,KAAK,IAAI;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA,MAAIC,4BAA4B,GAAGC,MAAM,CAACC,MAAP,CAAcH,KAAK,CAACI,SAApB,EAA+BC,KAA/B,CAAqC,CAArC,EAAuC,CAAvC,CAAnC;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,+BAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAYN,4BAAZ,EAZ0B,CAc1B;AACA;AACA;;AACA,MAAIO,YAAY,GAAGC,oBAAoB,CAACC,iBAAiB,CAACV,KAAK,CAACI,SAAP,CAAlB,CAAvC;AACAE,EAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAYC,YAAZ;AAEA,sBACE;AAAK,IAAA,SAAS,EAAC,qBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAGE,oBAAC,oBAAD;AACE,IAAA,MAAM,EAAER,KAAK,CAACW,MADhB;AAEE,IAAA,SAAS,EAAEV,4BAFb;AAGE,IAAA,OAAO,EAAED,KAAK,CAACY,OAHjB;AAIE,IAAA,KAAK,EAAEZ,KAAK,CAACa,KAJf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF,CADF;AAiCD,CAtDD;;AAwDA,eAAed,UAAf;AAGA;;;;;AAMA;AACA;AACA;;AACA,MAAMW,iBAAiB,GAAGI,GAAG,IAAI;AAG/B;AACA;AACA;AACA,MAAIC,qBAAqB,GAAGb,MAAM,CAACc,OAAP,CAAeF,GAAf,EAAoBT,KAApB,CAA0B,CAA1B,EAA4B,CAA5B,CAA5B,CAN+B,CAQ/B;;AACA,QAAMY,mBAAmB,GAAG,EAA5B,CAT+B,CAW/B;;AACAF,EAAAA,qBAAqB,CAACG,OAAtB,CAA+B,CAACC,cAAD,EAAiBC,CAAjB,KAAuB;AACpD;AACA;AACA,QAAGD,cAAc,CAAC,CAAD,CAAjB,EAAsB;AACpB;AACAF,MAAAA,mBAAmB,CAACI,IAApB,CAAyBF,cAAc,CAAC,CAAD,CAAvC;AACD;;AAAA;AACF,GAPD;AASA,SAAOF,mBAAP;AACD,CAtBD,C,CAwBA;AACA;AACA;AACA;;;AACA,MAAMR,oBAAoB,GAAGa,GAAG,IAAI;AAClC;AACA;AACA,MAAIC,eAAe,GAAGD,GAAG,CAACE,GAAJ,CAASC,OAAO,IAAI,MAAMA,OAA1B,CAAtB;AAEA,SAAOF,eAAP;AACD,CAND","sourcesContent":["// SearchForm.js\n\nimport React from 'react';\nimport TreatmentButtonsList from '../TreatmentButtonsList/TreatmentButtonsList';\n\nconst SearchForm = props => {\n  // #refactor!\n  // get the boolean values from the this.state object\n  // that will be passed to the children components\n  // and slice to remove the from and date values (this is not the most ideal solution\n  // because the slice will run everytime the render function runs, it would be better \n  // to handle this in the constructor, by setting two object in the state - one for \n  // the treatment and labels, and another for the dates )\n\n  // get the checked/unchecked array\n  let checkedUncheckedValuesArrray = Object.values(props.currState).slice(0,5)\n  console.log('checkedUncheckedValuesArrray:');\n  console.log(checkedUncheckedValuesArrray);\n\n  // get an array contain only the selected formatted labels\n  // that will be passed to the Dropwdown component\n  // and used by the component to output the chosen treatment(s)\n  let chosenLabels = formatSelectedLabels(getSelectedLabels(props.currState));\n  console.log('chosenLabels:');\n  console.log(chosenLabels);\n\n  return(\n    <div className=\"StartSearch-wrapper\">\n\n      {/* Render a TreatmentButtonsList and pass it some props */}\n      <TreatmentButtonsList\n        labels={props.labels}\n        isChecked={checkedUncheckedValuesArrray}\n        onClick={props.onClick}\n        icons={props.icons}\n      />\n\n      {/* Render a Dropdown and pass it some props */}\n{/*       <Dropdown \n        labels={props.labels}\n        chosenLabels={chosenLabels}\n        isChecked={checkedUncheckedValuesArrray}\n        onClick={this.handleClick}\n      /> */}\n\n      {/* Render the CalendarDropdown component that contains a SingleDatePicker */}\n{/*       <CalendarDropdown \n        from={this.state.from}\n        to={this.state.to}\n        handleDateClick={this.handleDateClick}\n      /> */}\n\n      {/* Submit Button */}\n      {/* <SubmitButton \n        handleClick={this.handleSubmitClick}\n      /> */}\n\n    </div>\n  )\n}\n\nexport default SearchForm;\n\n\n/* \n\n  Helper Functions\n\n*/\n\n// takes the state object and returns an array,\n// that contains the chosen treatments - \n// treatments with a value of true\nconst getSelectedLabels = obj => {\n\n\n  // get an array of the components state key/value pars,\n  // this will result in an array of nested arrays\n  // and remove the 'from' and 'to' from the array\n  let objectsKeyValPairsArr = Object.entries(obj).slice(0,5)\n\n  // initiate an empty array that will store the selected labels only\n  const selectedLabelsArray = [];\n\n  // loop through the objectsKeyValPairsArr (its an array of arrays)\n  objectsKeyValPairsArr.forEach( (currentElement, i) => {\n    // in the current element ([<label>],[<isChecked>]),\n    // if isChecked is true   \n    if(currentElement[1]) {\n      // then push the label to the selectedLabelsArray\n      selectedLabelsArray.push(currentElement[0])\n    };\n  });\n\n  return selectedLabelsArray;\n};\n\n// helper function, formatSelectedLabels,\n// takes an array contain the selected labels\n// and returns a new array with the formatted labels\n// for the dropdown component\nconst formatSelectedLabels = arr => {\n  // create a new array where each element has a space before the string,\n  // if not used, the result is: <label>,<label>,<label>\n  let formattedLabels = arr.map( element => \" \" + element);\n\n  return formattedLabels;\n};\n\n"]},"metadata":{},"sourceType":"module"}
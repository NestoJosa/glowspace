{"ast":null,"code":"var _jsxFileName = \"/Users/nestos/Desktop/Code/glowspace/src/components/Search/StartSearch/StartSearch.js\";\nimport React from 'react';\nimport TreatmentButtonsList from './TreatmentButtonsList/TreatmentButtonsList';\nimport Dropdown from './Dropdown/Dropdown';\nimport CalendarDropdown from './CalendarDropdown/CalendarDropdown';\nimport SubmitButton from './SubmitButton/SubmitButton';\nimport './StartSearch.css';\n\nclass StartSearch extends React.Component {\n  constructor(props) {\n    super(props); // make a shortcut for this.props\n\n    const p = this.props; // create an array for storing the labels (mostly for conveniance)\n    // these vals will not change in the components lifecycle\n\n    this.labels = [p.defValLabels[0], p.defValLabels[1], p.defValLabels[2], p.defValLabels[3], p.defValLabels[4]]; // set the initial state using the passed default values\n    // for the labels and the checkboxes\n    // each prop should output => <labelName>: <boolean>\n\n    this.state = {\n      [this.labels[0]]: p.defValIsChecked[0],\n      [this.labels[1]]: p.defValIsChecked[1],\n      [this.labels[2]]: p.defValIsChecked[2],\n      [this.labels[3]]: p.defValIsChecked[3],\n      [this.labels[4]]: p.defValIsChecked[4],\n      // set the values for the from and to dates\n      from: null,\n      to: null\n    }; // binders\n\n    this.handleClick = this.handleClick.bind(this);\n    this.handleDateClick = this.handleDateClick.bind(this);\n    this.handleSubmitClick = this.handleSubmitClick.bind(this);\n  }\n\n  // this handler is triggered, both when you click on a treatment-icons\n  // and also when you click on a treatment-checkbox\n  handleClick(clickedTreatment) {\n    // wip: trying to find issue with icon not \n    console.log('inside of clicked treatment');\n    this.setState({\n      [clickedTreatment]: !this.state[clickedTreatment]\n    });\n  }\n\n  handleDateClick(e) {\n    this.setState({\n      from: e.from,\n      to: e.to\n    });\n  }\n\n  handleSubmitClick() {\n    this.props.getSearchResults(this.state);\n  }\n\n  render() {\n    // #refactor!\n    // get the boolean values from the this.state object\n    // that will be passed to the children components\n    // and slice to remove the from and date values (this is not the most ideal solution\n    // because the slice will run everytime the render function runs, it would be better \n    // to handle this in the constructor, by setting two object in the state - one for \n    // the treatment and labels, and another for the dates )\n    let checkedUncheckedValuesArrray = Object.values(this.state).slice(0, 5); // get an array contain only the selected formatted labels\n    // that will be passed to the Dropwdown component\n    // and used by the component to output the chosen treatment(s)\n\n    let chosenLabels = formatSelectedLabels(getSelectedLabels(this.state));\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"StartSearch-wrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(TreatmentButtonsList, {\n      labels: this.labels,\n      isChecked: checkedUncheckedValuesArrray,\n      onClick: this.handleClick,\n      icons: this.props.icons,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Dropdown, {\n      labels: this.labels,\n      chosenLabels: chosenLabels,\n      isChecked: checkedUncheckedValuesArrray,\n      onClick: this.handleClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(CalendarDropdown, {\n      from: this.state.from,\n      to: this.state.to,\n      handleDateClick: this.handleDateClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(SubmitButton, {\n      handleClick: this.handleSubmitClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\n;\nexport default StartSearch;\n/* \n\n  Helper Functions\n\n*/\n// takes the state object and returns an array,\n// that contains the chosen treatments - \n// treatments with a value of true\n\nconst getSelectedLabels = obj => {\n  // get an array of the components state key/value pars,\n  // this will result in an array of nested arrays\n  // and remove the 'from' and 'to' from the array\n  let objectsKeyValPairsArr = Object.entries(obj).slice(0, 5); // initiate an empty array that will store the selected labels only\n\n  const selectedLabelsArray = []; // loop through the objectsKeyValPairsArr (its an array of arrays)\n\n  objectsKeyValPairsArr.forEach((currentElement, i) => {\n    // in the current element ([<label>],[<isChecked>]),\n    // if isChecked is true   \n    if (currentElement[1]) {\n      // then push the label to the selectedLabelsArray\n      selectedLabelsArray.push(currentElement[0]);\n    }\n\n    ;\n  });\n  return selectedLabelsArray;\n}; // helper function, formatSelectedLabels,\n// takes an array contain the selected labels\n// and returns a new array with the formatted labels\n// for the dropdown component\n\n\nconst formatSelectedLabels = arr => {\n  // create a new array where each element has a space before the string,\n  // if not used, the result is: <label>,<label>,<label>\n  let formattedLabels = arr.map(element => \" \" + element);\n  return formattedLabels;\n};","map":{"version":3,"sources":["/Users/nestos/Desktop/Code/glowspace/src/components/Search/StartSearch/StartSearch.js"],"names":["React","TreatmentButtonsList","Dropdown","CalendarDropdown","SubmitButton","StartSearch","Component","constructor","props","p","labels","defValLabels","state","defValIsChecked","from","to","handleClick","bind","handleDateClick","handleSubmitClick","clickedTreatment","console","log","setState","e","getSearchResults","render","checkedUncheckedValuesArrray","Object","values","slice","chosenLabels","formatSelectedLabels","getSelectedLabels","icons","obj","objectsKeyValPairsArr","entries","selectedLabelsArray","forEach","currentElement","i","push","arr","formattedLabels","map","element"],"mappings":"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","sourcesContent":["import React from 'react';\nimport TreatmentButtonsList from './TreatmentButtonsList/TreatmentButtonsList';\nimport Dropdown from './Dropdown/Dropdown';\nimport CalendarDropdown from './CalendarDropdown/CalendarDropdown';\nimport SubmitButton from './SubmitButton/SubmitButton';\nimport './StartSearch.css'\n\nclass StartSearch extends React.Component {\n  constructor(props) {\n    super(props);\n\n    // make a shortcut for this.props\n    const p = this.props;\n\n    // create an array for storing the labels (mostly for conveniance)\n    // these vals will not change in the components lifecycle\n    this.labels = [\n      p.defValLabels[0],\n      p.defValLabels[1],\n      p.defValLabels[2],\n      p.defValLabels[3],\n      p.defValLabels[4],  \n    ]\n\n    // set the initial state using the passed default values\n    // for the labels and the checkboxes\n    // each prop should output => <labelName>: <boolean>\n    this.state = {\n      [this.labels[0]]: p.defValIsChecked[0], \n      [this.labels[1]]: p.defValIsChecked[1],\n      [this.labels[2]]: p.defValIsChecked[2],\n      [this.labels[3]]: p.defValIsChecked[3],\n      [this.labels[4]]: p.defValIsChecked[4],\n\n      // set the values for the from and to dates\n      from: null,\n      to: null, \n    };\n\n    // binders\n    this.handleClick = this.handleClick.bind(this);\n    this.handleDateClick = this.handleDateClick.bind(this);\n    this.handleSubmitClick = this.handleSubmitClick.bind(this);\n  };\n\n  // this handler is triggered, both when you click on a treatment-icons\n  // and also when you click on a treatment-checkbox\n  handleClick(clickedTreatment) {\n    // wip: trying to find issue with icon not \n    console.log('inside of clicked treatment');\n    this.setState({ [clickedTreatment]: !this.state[clickedTreatment] });\n  }\n\n  handleDateClick(e) {\n    this.setState({\n      from: e.from,\n      to: e.to\n    });\n  }\n\n  handleSubmitClick() {\n    this.props.getSearchResults(this.state); \n  }\n\n  render() {\n    \n    // #refactor!\n    // get the boolean values from the this.state object\n    // that will be passed to the children components\n    // and slice to remove the from and date values (this is not the most ideal solution\n    // because the slice will run everytime the render function runs, it would be better \n    // to handle this in the constructor, by setting two object in the state - one for \n    // the treatment and labels, and another for the dates )\n    let checkedUncheckedValuesArrray = Object.values(this.state).slice(0,5)\n\n    // get an array contain only the selected formatted labels\n    // that will be passed to the Dropwdown component\n    // and used by the component to output the chosen treatment(s)\n    let chosenLabels = formatSelectedLabels(getSelectedLabels(this.state));\n\n    return(\n      <div className=\"StartSearch-wrapper\">\n\n        {/* Render a TreatmentButtonsList and pass it some props */}\n        <TreatmentButtonsList\n          labels={this.labels}\n          isChecked={checkedUncheckedValuesArrray}\n          onClick={this.handleClick}\n          icons={this.props.icons}\n        />\n\n        {/* Render a Dropdown and pass it some props */}\n        <Dropdown \n          labels={this.labels}\n          chosenLabels={chosenLabels}\n          isChecked={checkedUncheckedValuesArrray}\n          onClick={this.handleClick}\n        />\n\n        {/* Render the CalendarDropdown component that contains a SingleDatePicker */}\n        <CalendarDropdown \n          from={this.state.from}\n          to={this.state.to}\n          handleDateClick={this.handleDateClick}\n        />\n\n        {/* Submit Button */}\n        <SubmitButton \n          handleClick={this.handleSubmitClick}\n        />\n      </div>\n    );\n  };\n};\n\nexport default StartSearch;\n\n\n\n\n\n\n/* \n\n  Helper Functions\n\n*/\n\n// takes the state object and returns an array,\n// that contains the chosen treatments - \n// treatments with a value of true\nconst getSelectedLabels = obj => {\n\n\n  // get an array of the components state key/value pars,\n  // this will result in an array of nested arrays\n  // and remove the 'from' and 'to' from the array\n  let objectsKeyValPairsArr = Object.entries(obj).slice(0,5)\n\n  // initiate an empty array that will store the selected labels only\n  const selectedLabelsArray = [];\n\n  // loop through the objectsKeyValPairsArr (its an array of arrays)\n  objectsKeyValPairsArr.forEach( (currentElement, i) => {\n    // in the current element ([<label>],[<isChecked>]),\n    // if isChecked is true   \n    if(currentElement[1]) {\n      // then push the label to the selectedLabelsArray\n      selectedLabelsArray.push(currentElement[0])\n    };\n  });\n\n  return selectedLabelsArray;\n};\n\n// helper function, formatSelectedLabels,\n// takes an array contain the selected labels\n// and returns a new array with the formatted labels\n// for the dropdown component\nconst formatSelectedLabels = arr => {\n  // create a new array where each element has a space before the string,\n  // if not used, the result is: <label>,<label>,<label>\n  let formattedLabels = arr.map( element => \" \" + element);\n\n  return formattedLabels;\n};\n\n"]},"metadata":{},"sourceType":"module"}
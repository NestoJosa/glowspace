{"ast":null,"code":"var _jsxFileName = \"/Users/nestos/Desktop/Code/glowspace/src/components/Search/SearchForm/SearchFormContainer.js\";\n// SearchFormContainer.js\nimport React, { Component } from \"react\";\nimport SearchForm from './SearchForm'; // import the icons\n\nimport iconHair from \"../../../assets/icons/hair.svg\";\nimport iconFace from \"../../../assets/icons/face.svg\";\nimport iconHand from \"../../../assets/icons/hand.svg\";\nimport iconBody from \"../../../assets/icons/body.svg\";\nimport iconFeet from \"../../../assets/icons/feet.svg\"; // create an array of icons for the StartSearch component\n\nconst icons = [iconHair, iconFace, iconHand, iconBody, iconFeet]; // WARNING: currently it will not work to change the language settings \n\nlet treatmentLabels = {\n  eng: ['hair', 'face', 'hands', 'body', 'feet'],\n  dk: ['Hår', 'Ansigt', 'Hænder', 'Krop', 'Fødder']\n}; // These are default values. Note: the order matters -\n// it matches the order of the treatments labels arr\n\nlet treatmentLabelIsActive = [true, true, true, true, true];\n\nclass SearchFormContainer extends Component {\n  constructor(props) {\n    super(props); // Set the state\n\n    this.state = {\n      [treatmentLabels.dk[0]]: [treatmentLabelIsActive[0]],\n      [treatmentLabels.dk[1]]: [treatmentLabelIsActive[1]],\n      [treatmentLabels.dk[2]]: [treatmentLabelIsActive[2]],\n      [treatmentLabels.dk[3]]: [treatmentLabelIsActive[3]],\n      [treatmentLabels.dk[4]]: [treatmentLabelIsActive[4]],\n      // set the values for the from and to dates\n      from: null,\n      to: null\n    }; // Binders\n\n    this.handleClick = this.handleClick.bind(this);\n    this.handleDateClick = this.handleDateClick.bind(this);\n    this.handleSubmitClick = this.handleSubmitClick.bind(this);\n  } // this handler is triggered when you click on a treatment-icon\n  // and when you click on a treatment-checkbox\n\n\n  handleClick(clickedTreatment) {\n    this.setState({\n      [clickedTreatment]: !this.state[clickedTreatment]\n    });\n  }\n\n  handleDateClick(e) {\n    this.setState({\n      from: e.from,\n      to: e.to\n    });\n  }\n\n  handleSubmitClick() {\n    this.props.getSearchResults(this.state);\n  }\n\n  render() {\n    // get the checked/unchecked array\n    let activeInactiveTreatmentArray = Object.values(this.state).slice(0, 5); // get a list of the active labels\n\n    let chosenLabels = formatSelectedLabels(getSelectedLabels(this.state));\n    return /*#__PURE__*/React.createElement(SearchForm // pass the labels array\n    , {\n      labels: treatmentLabels.dk // pass the default is checked array\n      ,\n      defValIsChecked: treatmentLabelIsActive // pass the list of icon paths\n      ,\n      icons: icons // pass the method used to get search results\n      ,\n      getSearchResults: this.handleSubmitClick,\n      isActive: activeInactiveTreatmentArray,\n      onClick: this.handleClick,\n      activeLabels: chosenLabels,\n      fromDate: this.state.from,\n      toDate: this.state.to,\n      onDatePick: this.handleDateClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 7\n      }\n    });\n  }\n\n}\n\nexport default SearchFormContainer;\n/* \n\n  Helper Functions\n\n*/\n// takes the state object and returns an array,\n// that contains the chosen treatments - \n// treatments with a value of true\n\nconst getSelectedLabels = obj => {\n  // get an array of the components state key/value pars,\n  // this will result in an array of nested arrays\n  // and remove the 'from' and 'to' from the array\n  let objectsKeyValPairsArr = Object.entries(obj).slice(0, 5); // initiate an empty array that will store the selected labels only\n\n  const selectedLabelsArray = []; // loop through the objectsKeyValPairsArr (its an array of arrays)\n\n  objectsKeyValPairsArr.forEach((currentElement, i) => {\n    // in the current element ([<label>],[<isChecked>]),\n    // if isChecked is true   \n    if (currentElement[1]) {\n      // then push the label to the selectedLabelsArray\n      selectedLabelsArray.push(currentElement[0]);\n    }\n\n    ;\n  });\n  return selectedLabelsArray;\n}; // helper function, formatSelectedLabels,\n// takes an array contain the selected labels\n// and returns a new array with the formatted labels\n// for the dropdown component\n\n\nconst formatSelectedLabels = arr => {\n  // create a new array where each element has a space before the string,\n  // if not used, the result is: <label>,<label>,<label>\n  let formattedLabels = arr.map(element => \" \" + element);\n  return formattedLabels;\n};","map":{"version":3,"sources":["/Users/nestos/Desktop/Code/glowspace/src/components/Search/SearchForm/SearchFormContainer.js"],"names":["React","Component","SearchForm","icons","iconHair","iconFace","iconHand","iconBody","iconFeet","treatmentLabels","eng","dk","treatmentLabelIsActive","SearchFormContainer","constructor","props","state","from","to","handleClick","bind","handleDateClick","handleSubmitClick","clickedTreatment","setState","e","getSearchResults","render","activeInactiveTreatmentArray","Object","values","slice","chosenLabels","formatSelectedLabels","getSelectedLabels","obj","objectsKeyValPairsArr","entries","selectedLabelsArray","forEach","currentElement","i","push","arr","formattedLabels","map","element"],"mappings":"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","sourcesContent":["// SearchFormContainer.js\n\nimport React, { Component } from \"react\";\nimport SearchForm from './SearchForm';\n\n// import the icons\nimport iconHair from '../../../assets/icons/hair.svg';\nimport iconFace from '../../../assets/icons/face.svg';\nimport iconHand from '../../../assets/icons/hand.svg';\nimport iconBody from '../../../assets/icons/body.svg';\nimport iconFeet from '../../../assets/icons/feet.svg';\n\n// create an array of icons for the StartSearch component\nconst icons = [ iconHair, iconFace, iconHand, iconBody, iconFeet ];\n\n// WARNING: currently it will not work to change the language settings \nlet treatmentLabels = {\n  eng: ['hair', 'face', 'hands', 'body', 'feet'],\n  dk: ['Hår', 'Ansigt', 'Hænder', 'Krop', 'Fødder'],\n}\n\n// These are default values. Note: the order matters -\n// it matches the order of the treatments labels arr\nlet treatmentLabelIsActive = [true, true, true, true, true];\n\nclass SearchFormContainer extends Component {\n  constructor(props) {\n    super(props);\n\n    // Set the state\n    this.state = {\n      [treatmentLabels.dk[0]]: [treatmentLabelIsActive[0]],\n      [treatmentLabels.dk[1]]: [treatmentLabelIsActive[1]],\n      [treatmentLabels.dk[2]]: [treatmentLabelIsActive[2]],\n      [treatmentLabels.dk[3]]: [treatmentLabelIsActive[3]],\n      [treatmentLabels.dk[4]]: [treatmentLabelIsActive[4]],\n      // set the values for the from and to dates\n      from: null,\n      to: null, \n    }\n\n    // Binders\n    this.handleClick = this.handleClick.bind(this);\n    this.handleDateClick = this.handleDateClick.bind(this);\n    this.handleSubmitClick = this.handleSubmitClick.bind(this);\n  }\n\n  // this handler is triggered when you click on a treatment-icon\n  // and when you click on a treatment-checkbox\n  handleClick(clickedTreatment) {\n    this.setState({ [clickedTreatment]: !this.state[clickedTreatment] });\n  }\n\n  handleDateClick(e) {\n    this.setState({\n      from: e.from,\n      to: e.to\n    });\n  }\n\n  handleSubmitClick() {\n    this.props.getSearchResults(this.state); \n  }\n\n  render() {\n    // get the checked/unchecked array\n    let activeInactiveTreatmentArray = Object.values(this.state).slice(0,5)\n\n    // get a list of the active labels\n    let chosenLabels = formatSelectedLabels(getSelectedLabels(this.state));\n\n    return(\n      <SearchForm\n        // pass the labels array\n        labels={treatmentLabels.dk}\n        // pass the default is checked array\n        defValIsChecked={treatmentLabelIsActive}\n        // pass the list of icon paths\n        icons={icons}\n        // pass the method used to get search results\n        getSearchResults={this.handleSubmitClick}\n        isActive={activeInactiveTreatmentArray}\n        onClick={this.handleClick}\n        activeLabels={chosenLabels}\n        fromDate={this.state.from} \n        toDate={this.state.to}\n        onDatePick={this.handleDateClick} \n      />\n    )\n  }\n}\n\nexport default SearchFormContainer;\n\n\n\n\n\n/* \n\n  Helper Functions\n\n*/\n\n// takes the state object and returns an array,\n// that contains the chosen treatments - \n// treatments with a value of true\nconst getSelectedLabels = obj => {\n  // get an array of the components state key/value pars,\n  // this will result in an array of nested arrays\n  // and remove the 'from' and 'to' from the array\n  let objectsKeyValPairsArr = Object.entries(obj).slice(0,5)\n\n  // initiate an empty array that will store the selected labels only\n  const selectedLabelsArray = [];\n\n  // loop through the objectsKeyValPairsArr (its an array of arrays)\n  objectsKeyValPairsArr.forEach( (currentElement, i) => {\n    // in the current element ([<label>],[<isChecked>]),\n    // if isChecked is true   \n    if(currentElement[1]) {\n      // then push the label to the selectedLabelsArray\n      selectedLabelsArray.push(currentElement[0])\n    };\n  });\n\n  return selectedLabelsArray;\n};\n\n// helper function, formatSelectedLabels,\n// takes an array contain the selected labels\n// and returns a new array with the formatted labels\n// for the dropdown component\nconst formatSelectedLabels = arr => {\n  // create a new array where each element has a space before the string,\n  // if not used, the result is: <label>,<label>,<label>\n  let formattedLabels = arr.map( element => \" \" + element);\n\n  return formattedLabels;\n};\n\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/Users/nestos/Desktop/Code/glowspace/src/components/Search/SearchForm/SearchFormContainer.js\";\n// SearchFormContainer.js\nimport React, { Component } from \"react\";\nimport SearchForm from './SearchForm'; // Import the icons\n\nimport iconHair from \"../../../assets/icons/hair.svg\";\nimport iconFace from \"../../../assets/icons/face.svg\";\nimport iconHand from \"../../../assets/icons/hand.svg\";\nimport iconBody from \"../../../assets/icons/body.svg\";\nimport iconFeet from \"../../../assets/icons/feet.svg\"; // Create an object for the labels in different languages\n\nlet treatmentAreas = {\n  eng: ['Hair', 'Face', 'Hands', 'Body', 'Feet'],\n  dk: ['Hår', 'Ansigt', 'Hænder', 'Krop', 'Fødder']\n}; // WARNING: currently it will not work to change the language settings \n\nlet locale = 'dk'; // Create an object for the treatmentAreaData\n\nconst treatmentAreaData = {\n  hair: {\n    label: treatmentAreas[locale][0],\n    isActive: true,\n    icon: iconHair\n  },\n  face: {\n    label: treatmentAreas[locale][1],\n    isActive: true,\n    icon: iconFace\n  },\n  hands: {\n    label: treatmentAreas[locale][2],\n    isActive: true,\n    icon: iconHand\n  },\n  body: {\n    label: treatmentAreas[locale][3],\n    isActive: true,\n    icon: iconBody\n  },\n  feet: {\n    label: treatmentAreas[locale][4],\n    isActive: true,\n    icon: iconFeet\n  }\n};\n\nclass SearchFormContainer extends Component {\n  constructor(props) {\n    super(props); // Set the initial default values\n\n    this.state = {\n      [treatmentAreaData['hair'].label]: treatmentAreaData['hair'].isActive,\n      [treatmentAreaData['face'].label]: treatmentAreaData['face'].isActive,\n      [treatmentAreaData['hands'].label]: treatmentAreaData['hands'].isActive,\n      [treatmentAreaData['body'].label]: treatmentAreaData['body'].isActive,\n      [treatmentAreaData['feet'].label]: treatmentAreaData['feet'].isActive,\n      from: null,\n      to: null\n    }; // Create a list of icons. Note: we are looping through the treatmentAreaData-obj, \n    // NOT the state object, because these vals will not change\n\n    this.treatmentAreaIconList = Object.entries(treatmentAreaData).map(currEl => currEl[1].icon); // Binders\n\n    this.handleClick = this.handleClick.bind(this);\n    this.handleDateClick = this.handleDateClick.bind(this);\n    this.handleSubmitClick = this.handleSubmitClick.bind(this);\n  } // toggle the clicked treatment-area isActive value\n\n\n  handleClick(clickedTreatmentArea) {\n    this.setState({\n      [clickedTreatmentArea]: !this.state[clickedTreatmentArea]\n    });\n  }\n\n  handleDateClick(e) {\n    this.setState({\n      from: e.from,\n      to: e.to\n    });\n  }\n\n  handleSubmitClick() {\n    this.props.getSearchResults(this.state);\n  }\n\n  render() {\n    console.log('hello'); // Create a list of entries from this state\n    // corrsponding to the treatmentAreas-keys and their isActive-values\n    // e.g [['Hair', true],['Face', true]]\n\n    let treatmentAreasEntries = Object.entries(this.state).slice(0, 5);\n    let treatAreaDropDownLabel = getActiveTreatmentAreasList(treatmentAreasEntries); // Get a list of the active treatments for the Dropdown\n    //let activeTreatments = formatActiveTreatments(getActiveTreatmentsList(this.state));\n\n    return /*#__PURE__*/React.createElement(SearchForm // pass the list of treatmentArea and isActive pairs\n    , {\n      treatAreaAndIsActivePairs: treatmentAreasEntries // treatmentAreasIsActive={treatmentAreasIsActiveList} \n      ,\n      treatAreaIcons: this.treatmentAreaIconList,\n      treatAreaDropdownLabel: treatAreaDropDownLabel // props for Dropdown\n      //activeLabels={activeTreatments}\n      // pass the list of icon paths\n      ,\n      onClick: this.handleClick // pass the method used to get search results\n      ,\n      getSearchResults: this.handleSubmitClick // props for DatePicker\n      ,\n      fromDate: this.state.from,\n      toDate: this.state.to,\n      onDatePick: this.handleDateClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 7\n      }\n    });\n  }\n\n}\n\nexport default SearchFormContainer;\n/* \n\n  Helper Functions\n\n*/\n// refacor the function\n// currently: it takes an object, but it should beable to take a list of nested arrays\n// the list of entries... \n\nconst getActiveTreatmentAreasList = entries => {\n  // takes a list of entries: e.g [['Hair', true],['Face', false],['Hands', true]]\n  // returns a list of active treatment areas only:  e.g. ['Hair', 'Hands']\n  // create a list of active pairs\n  let activePairs = entries.filter(currEl => currEl[1] === true); // create a list of active treatment areas\n\n  let activeTreatmentAreas = activePairs.map(currEl => currEl[0]);\n  return activeTreatmentAreas;\n};\n\nconst formatActiveTreatmentAreaLabels = arr => {\n  // takes a list of active treatment areas: ['Hair', 'Hands']\n  // returns a new formatted list: [['Hair', ', Hands']]\n  // note the inclusion of a comma sign and space starting from the second element\n  let formattedLabels = []; // if there are no active labels\n  // return a custom msg e.g. \"Chose treatment area\"\n\n  if (arr.length === 0) {\n    return \"Vælg behandling område\";\n  } // if there is only on element in the list, \n  // then we don't have to format anything,\n  // so just return the list \n\n\n  if (arr.length === 1) {\n    return arr;\n  } else {\n    // push the first element, that we don't need to format\n    // to the list of formattedLabels\n    formattedLabels.push(arr[0]); // push formattted labels, starting from the second element\n\n    for (let i = 1; i < arr.length; i++) {\n      formattedLabels.push(', ' + arr[i]);\n    }\n  }\n\n  return formattedLabels;\n};","map":{"version":3,"sources":["/Users/nestos/Desktop/Code/glowspace/src/components/Search/SearchForm/SearchFormContainer.js"],"names":["React","Component","SearchForm","treatmentAreas","eng","dk","locale","treatmentAreaData","hair","label","isActive","icon","iconHair","face","iconFace","hands","iconHand","body","iconBody","feet","iconFeet","SearchFormContainer","constructor","props","state","from","to","treatmentAreaIconList","Object","entries","map","currEl","handleClick","bind","handleDateClick","handleSubmitClick","clickedTreatmentArea","setState","e","getSearchResults","render","console","log","treatmentAreasEntries","slice","treatAreaDropDownLabel","getActiveTreatmentAreasList","activePairs","filter","activeTreatmentAreas","formatActiveTreatmentAreaLabels","arr","formattedLabels","length","push","i"],"mappings":"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","sourcesContent":["// SearchFormContainer.js\n\nimport React, { Component } from \"react\";\nimport SearchForm from './SearchForm';\n\n// Import the icons\nimport iconHair from '../../../assets/icons/hair.svg';\nimport iconFace from '../../../assets/icons/face.svg';\nimport iconHand from '../../../assets/icons/hand.svg';\nimport iconBody from '../../../assets/icons/body.svg';\nimport iconFeet from '../../../assets/icons/feet.svg';\n\n// Create an object for the labels in different languages\nlet treatmentAreas = {\n  eng: ['Hair', 'Face', 'Hands', 'Body', 'Feet'],\n  dk: ['Hår', 'Ansigt', 'Hænder', 'Krop', 'Fødder'],\n}\n\n// WARNING: currently it will not work to change the language settings \nlet locale = 'dk';\n\n// Create an object for the treatmentAreaData\nconst treatmentAreaData = {\n  hair: {\n    label: treatmentAreas[locale][0],\n    isActive: true,\n    icon: iconHair,\n  },\n  face: {\n    label: treatmentAreas[locale][1],\n    isActive: true,\n    icon: iconFace,\n  },\n  hands: {\n    label: treatmentAreas[locale][2],\n    isActive: true,\n    icon: iconHand,\n  },\n  body: {\n    label: treatmentAreas[locale][3],\n    isActive: true,\n    icon: iconBody,\n  },\n  feet: {\n    label: treatmentAreas[locale][4],\n    isActive: true,\n    icon: iconFeet,\n  },\n}\n\nclass SearchFormContainer extends Component {\n  constructor(props) {\n    super(props);\n\n    // Set the initial default values\n    this.state = {\n      [treatmentAreaData['hair'].label]:  treatmentAreaData['hair'].isActive,\n      [treatmentAreaData['face'].label]:  treatmentAreaData['face'].isActive,\n      [treatmentAreaData['hands'].label]: treatmentAreaData['hands'].isActive,\n      [treatmentAreaData['body'].label]:  treatmentAreaData['body'].isActive,\n      [treatmentAreaData['feet'].label]:  treatmentAreaData['feet'].isActive,\n      from: null,\n      to: null, \n    }\n\n    // Create a list of icons. Note: we are looping through the treatmentAreaData-obj, \n    // NOT the state object, because these vals will not change\n    this.treatmentAreaIconList = Object.entries(treatmentAreaData).map( currEl => currEl[1].icon);\n\n    // Binders\n    this.handleClick = this.handleClick.bind(this);\n    this.handleDateClick = this.handleDateClick.bind(this);\n    this.handleSubmitClick = this.handleSubmitClick.bind(this);\n  }\n\n  // toggle the clicked treatment-area isActive value\n  handleClick(clickedTreatmentArea) {\n    this.setState({ [clickedTreatmentArea]: !this.state[clickedTreatmentArea] });\n  }\n\n  handleDateClick(e) {\n    this.setState({\n      from: e.from,\n      to: e.to\n    });\n  }\n\n  handleSubmitClick() {\n    this.props.getSearchResults(this.state); \n  }\n\n  render() {\n    console.log('hello');\n    // Create a list of entries from this state\n    // corrsponding to the treatmentAreas-keys and their isActive-values\n    // e.g [['Hair', true],['Face', true]]\n    let treatmentAreasEntries = Object.entries(this.state).slice(0,5);\n\n    let treatAreaDropDownLabel = getActiveTreatmentAreasList(treatmentAreasEntries);\n    \n    // Get a list of the active treatments for the Dropdown\n    //let activeTreatments = formatActiveTreatments(getActiveTreatmentsList(this.state));\n\n    return(\n      <SearchForm\n        // pass the list of treatmentArea and isActive pairs\n\n        treatAreaAndIsActivePairs={treatmentAreasEntries}\n         \n        // treatmentAreasIsActive={treatmentAreasIsActiveList} \n\n        treatAreaIcons={this.treatmentAreaIconList}\n\n        treatAreaDropdownLabel={treatAreaDropDownLabel}\n\n        // props for Dropdown\n        //activeLabels={activeTreatments}\n\n                \n        // pass the list of icon paths\n\n        \n        onClick={this.handleClick}\n\n        // pass the method used to get search results\n        getSearchResults={this.handleSubmitClick}\n\n        // props for DatePicker\n        fromDate={this.state.from} \n        toDate={this.state.to}\n        onDatePick={this.handleDateClick} \n      />\n    )\n  }\n}\n\nexport default SearchFormContainer;\n\n\n\n\n\n/* \n\n  Helper Functions\n\n*/\n\n// refacor the function\n// currently: it takes an object, but it should beable to take a list of nested arrays\n// the list of entries... \n\nconst getActiveTreatmentAreasList = entries => {\n  // takes a list of entries: e.g [['Hair', true],['Face', false],['Hands', true]]\n  // returns a list of active treatment areas only:  e.g. ['Hair', 'Hands']\n  \n  // create a list of active pairs\n  let activePairs = entries.filter( currEl => currEl[1] === true )\n\n  // create a list of active treatment areas\n  let activeTreatmentAreas = activePairs.map(currEl => currEl[0]);\n  \n  return activeTreatmentAreas\n}\n\nconst formatActiveTreatmentAreaLabels = arr => {\n  // takes a list of active treatment areas: ['Hair', 'Hands']\n  // returns a new formatted list: [['Hair', ', Hands']]\n  // note the inclusion of a comma sign and space starting from the second element\n  let formattedLabels = [];\n\n  // if there are no active labels\n  // return a custom msg e.g. \"Chose treatment area\"\n  if (arr.length === 0) {\n    return \"Vælg behandling område\"\n  }\n\n  // if there is only on element in the list, \n  // then we don't have to format anything,\n  // so just return the list \n  if (arr.length === 1) { \n    return arr \n  } else {\n    // push the first element, that we don't need to format\n    // to the list of formattedLabels\n    formattedLabels.push(arr[0])\n    // push formattted labels, starting from the second element\n    for (let i = 1; i < arr.length; i++) {\n      formattedLabels.push(', ' + arr[i])\n    }\n  }\n\n  return formattedLabels;\n};\n\n"]},"metadata":{},"sourceType":"module"}
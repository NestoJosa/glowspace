{"ast":null,"code":"// SearchResultsUtils.js\nvar formatDate=function formatDate(dateString){/* \n\n    Input: \"2020-02-0 4 10:00:00\"\n    Output: \"Tirsdag d. 4 Feb. kl 10.00\"\n\n  */var input=dateString;// => e.g. \"2020-02-04 10:00:00\"\n// Exchange the dashes in the date for slashes,\n// this is needed for the subsequent \"new Date\"\" call to work in Safari\n// e.g. \"2020-02-04 10:00:00\" to \"2020/02/04 10:00:00\"\n// split the date string into an array of two elements: date and time\nvar splittedDateStr=input.split(\" \");// split the date element into an array\nvar splittedDate=splittedDateStr[0].split(\"-\");// join back the splitted date into a string seperated by a dash\nvar joinedDate=splittedDate.join(\"/\");// concatenate the date with the time\nvar dateStrWithSlashes=joinedDate+\" \"+splittedDateStr[1];// Convert the date in numbers, to a date including a weekday and month:\n// e.g. \"2020/02/04 10:00:00\" => \"tirsdag 4. feb. 10.00\"\nvar options={weekday:'long',month:'short',day:'numeric',hour:'2-digit',minute:'2-digit'};var readableDate=new Date(dateStrWithSlashes).toLocaleDateString('da-DK',options);// Make a nicer date: e.g. \"tirsdag 4. feb. 10.00\" => \"Tirsdag d. 4 Feb. kl 10.00\"\nvar dateArr=readableDate.split(' ');// Cap the first letter of weekday\ndateArr[0]=dateArr[0].charAt(0).toUpperCase()+dateArr[0].substring(1);// Add a \"d.\" after the weekday, before the day number\ndateArr.splice(1,0,'d.');// Remove the ending dot from the day number ex: \"15.\" to \"15\"\ndateArr[2]=dateArr[2].substring(0,dateArr[2].length-1);// Cap the first letter of month\ndateArr[3]=dateArr[3].charAt(0).toUpperCase()+dateArr[3].substring(1);// Add a \"kl\" after the month, before the hour\ndateArr.splice(4,0,'kl');// Convert the array back into a string\nvar output=dateArr.join(\" \");return output;// => e.g. \"Tirsdag d. 4 Feb. kl 10.00\"\n};export var addTheTreatmentsOffered=function addTheTreatmentsOffered(array){var newArray=array;// Loop through all of the saloons\nfor(var i=0;i<newArray.length;i++){var saloon=newArray[i];// Initiate an empty array\n// that will be used to store the treatment\n// that each saloon offers\nvar saloonTreatments=[];// Loop through each saloons array of timeslots\nfor(var y=0;y<saloon.timeslots.length;y++){// the timeslot is an array of objects\nvar timeslot=saloon.timeslots[y];// Loop through the array of treatments, that is housed in each timeslot\nvar _loop=function _loop(z){var treatment=timeslot.treatments[z];// check if the current looped through treatment's name is \n// already in the saloonTreatments array\nvar isIncluded=saloonTreatments.some(function(element){return element.name===treatment.name;});// if it is NOT already included\nif(!isIncluded){// then push it to the saloonTreatments array\nsaloonTreatments.push(treatment);};};for(var z=0;z<timeslot.treatments.length;z++){_loop(z);};};// add the new array of offered treatments to the saloon objects\nsaloon.treatmentsOffered=saloonTreatments;// reset the saloonTreatments array before initializing a new loop\nsaloonTreatments=[];};return newArray;};export var addCountAndNextToEachTreatment=function addCountAndNextToEachTreatment(array){var manipulatedArray=array;// Loop through the saloons \nfor(var i=0;i<manipulatedArray.length;i++){var saloon=manipulatedArray[i];// Run an inner loop on the saloons treatmentsOffered array\n// so we basically take the treatments offered list and start another loop\nvar _loop2=function _loop2(j){var treatmentOffered=saloon.treatmentsOffered[j];// give the treatments offered object a new prop that will be\n// incremented for everytime we find a matching treatment in each timeslot\ntreatmentOffered.count=null;treatmentOffered.next=null;// Run another inner loop on the saloons timeslots array\n// The timeslots array contains an array of timeslot objects\n// that all have a treatment prop that has an array of \n// available treatments offered in that timeslot\nfor(var k=0;k<saloon.timeslots.length;k++){var timeslot=saloon.timeslots[k];// if the current timeslots treatment array contains the current treatmentOffered\nvar isIncluded=timeslot.treatments.some(function(element){return element.name===treatmentOffered.name;});// then add one to treatmentOffered.count\nif(isIncluded){treatmentOffered.count++;};// add the next available timeslot if not already set\nif(treatmentOffered.next===null){// here we could call a format date function that takes the date string\n// and converts it into our desired format: Onsdag d. 15 April kl 10:00\n//treatmentOffered.next = <FormatDate dateString={timeslot.start} />\ntreatmentOffered.next=formatDate(timeslot.start);}};};for(var j=0;j<saloon.treatmentsOffered.length;j++){_loop2(j);};};};export var addDistanceToSaloon=function addDistanceToSaloon(clientCoordinates,arrayOfSaloonObjects){var lat1=clientCoordinates.clientLatitude;var lon1=clientCoordinates.clientLongitude;// loop through the array of saloon objects\nfor(var i=0;i<arrayOfSaloonObjects.length;i++){var currentSaloon=arrayOfSaloonObjects[i];var lat2=currentSaloon.latitude;var lon2=currentSaloon.longitude;currentSaloon.distance=getDistance(lat1,lon1,lat2,lon2);};};var getDistance=function getDistance(lat1,lon1,lat2,lon2){// return a zero if the two sets of coordinates are the same\nif(lat1===lat2&&lon1===lon2){return 0;}// magic:\nelse{var radlat1=Math.PI*lat1/180;var radlat2=Math.PI*lat2/180;var theta=lon1-lon2;var radtheta=Math.PI*theta/180;var dist=Math.sin(radlat1)*Math.sin(radlat2)+Math.cos(radlat1)*Math.cos(radlat2)*Math.cos(radtheta);if(dist>1){dist=1;}dist=Math.acos(dist);dist=dist*180/Math.PI;dist=dist*60*1.1515;dist=dist*1.609344;//km\ndist=Math.round(dist*10)/10;return dist;};};export var shortenTitleAndDescription=function shortenTitleAndDescription(saloonArray){// Run an outer loop on the saloons\nfor(var i=0;i<saloonArray.length;i++){var saloon=saloonArray[i];// Run an inner loop on the treatments that each saloon offers\nfor(var j=0;j<saloon.treatmentsOffered.length;j++){var treatment=saloon.treatmentsOffered[j];if(treatment.name.length>100){treatment.name=shortenString(treatment.name,100);};if(treatment.description.length>250){treatment.description=shortenString(treatment.description,250);};};};};var shortenString=function shortenString(string,desiredLength){return string.slice(0,desiredLength)+\"[...]\";};","map":{"version":3,"sources":["/Users/nestos/Desktop/Code/glowspace/src/components/Search/SearchResults/Utils/SearchResultsUtils.js"],"names":["formatDate","dateString","input","splittedDateStr","split","splittedDate","joinedDate","join","dateStrWithSlashes","options","weekday","month","day","hour","minute","readableDate","Date","toLocaleDateString","dateArr","charAt","toUpperCase","substring","splice","length","output","addTheTreatmentsOffered","array","newArray","i","saloon","saloonTreatments","y","timeslots","timeslot","z","treatment","treatments","isIncluded","some","element","name","push","treatmentsOffered","addCountAndNextToEachTreatment","manipulatedArray","j","treatmentOffered","count","next","k","start","addDistanceToSaloon","clientCoordinates","arrayOfSaloonObjects","lat1","clientLatitude","lon1","clientLongitude","currentSaloon","lat2","latitude","lon2","longitude","distance","getDistance","radlat1","Math","PI","radlat2","theta","radtheta","dist","sin","cos","acos","round","shortenTitleAndDescription","saloonArray","shortenString","description","string","desiredLength","slice"],"mappings":"AAAA;AAEA,GAAMA,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,CAAAC,UAAU,CAAI,CAC/B;;;;;IAMA,GAAIC,CAAAA,KAAK,CAAGD,UAAZ,CACA;AAEA;AACA;AACA;AAEA;AACA,GAAIE,CAAAA,eAAe,CAAGD,KAAK,CAACE,KAAN,CAAY,GAAZ,CAAtB,CACA;AACA,GAAIC,CAAAA,YAAY,CAAGF,eAAe,CAAC,CAAD,CAAf,CAAmBC,KAAnB,CAAyB,GAAzB,CAAnB,CACA;AACA,GAAIE,CAAAA,UAAU,CAAGD,YAAY,CAACE,IAAb,CAAkB,GAAlB,CAAjB,CACA;AACA,GAAIC,CAAAA,kBAAkB,CAAGF,UAAU,CAAG,GAAb,CAAmBH,eAAe,CAAC,CAAD,CAA3D,CAEA;AACA;AACA,GAAMM,CAAAA,OAAO,CACP,CAACC,OAAO,CAAE,MAAV,CAAkBC,KAAK,CAAE,OAAzB,CAAkCC,GAAG,CAAE,SAAvC,CAAkDC,IAAI,CAAE,SAAxD,CAAmEC,MAAM,CAAE,SAA3E,CADN,CAEA,GAAMC,CAAAA,YAAY,CAAG,GAAIC,CAAAA,IAAJ,CAASR,kBAAT,EAA6BS,kBAA7B,CAAgD,OAAhD,CAAyDR,OAAzD,CAArB,CAEA;AACA,GAAMS,CAAAA,OAAO,CAAGH,YAAY,CAACX,KAAb,CAAmB,GAAnB,CAAhB,CACA;AACAc,OAAO,CAAC,CAAD,CAAP,CAAaA,OAAO,CAAC,CAAD,CAAP,CAAWC,MAAX,CAAkB,CAAlB,EAAqBC,WAArB,GAAqCF,OAAO,CAAC,CAAD,CAAP,CAAWG,SAAX,CAAqB,CAArB,CAAlD,CACA;AACAH,OAAO,CAACI,MAAR,CAAe,CAAf,CAAkB,CAAlB,CAAqB,IAArB,EACA;AACAJ,OAAO,CAAC,CAAD,CAAP,CAAaA,OAAO,CAAC,CAAD,CAAP,CAAWG,SAAX,CAAqB,CAArB,CAAwBH,OAAO,CAAC,CAAD,CAAP,CAAWK,MAAX,CAAmB,CAA3C,CAAb,CACA;AACAL,OAAO,CAAC,CAAD,CAAP,CAAaA,OAAO,CAAC,CAAD,CAAP,CAAWC,MAAX,CAAkB,CAAlB,EAAqBC,WAArB,GAAqCF,OAAO,CAAC,CAAD,CAAP,CAAWG,SAAX,CAAqB,CAArB,CAAlD,CACA;AACAH,OAAO,CAACI,MAAR,CAAe,CAAf,CAAkB,CAAlB,CAAqB,IAArB,EACA;AACA,GAAME,CAAAA,MAAM,CAAGN,OAAO,CAACX,IAAR,CAAa,GAAb,CAAf,CAEA,MAAOiB,CAAAA,MAAP,CAAe;AAChB,CA7CD,CA+CA,MAAO,IAAMC,CAAAA,uBAAuB,CAAG,QAA1BA,CAAAA,uBAA0B,CAACC,KAAD,CAAW,CAChD,GAAIC,CAAAA,QAAQ,CAAGD,KAAf,CAEA;AACA,IAAK,GAAIE,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGD,QAAQ,CAACJ,MAA7B,CAAqCK,CAAC,EAAtC,CAA0C,CACxC,GAAMC,CAAAA,MAAM,CAAGF,QAAQ,CAACC,CAAD,CAAvB,CAEA;AACA;AACA;AACA,GAAIE,CAAAA,gBAAgB,CAAG,EAAvB,CAEA;AACA,IAAK,GAAIC,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGF,MAAM,CAACG,SAAP,CAAiBT,MAArC,CAA6CQ,CAAC,EAA9C,CAAkD,CAEhD;AACA,GAAIE,CAAAA,QAAQ,CAAGJ,MAAM,CAACG,SAAP,CAAiBD,CAAjB,CAAf,CAEA;AALgD,yBAMvCG,CANuC,EAO9C,GAAMC,CAAAA,SAAS,CAAGF,QAAQ,CAACG,UAAT,CAAoBF,CAApB,CAAlB,CAEA;AACA;AACA,GAAIG,CAAAA,UAAU,CAAGP,gBAAgB,CAACQ,IAAjB,CAAuB,SAAAC,OAAO,QAAIA,CAAAA,OAAO,CAACC,IAAR,GAAiBL,SAAS,CAACK,IAA/B,EAA9B,CAAjB,CAEA;AACA,GAAI,CAACH,UAAL,CAAiB,CACf;AACAP,gBAAgB,CAACW,IAAjB,CAAsBN,SAAtB,EACD,EAjB6C,EAMhD,IAAK,GAAID,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGD,QAAQ,CAACG,UAAT,CAAoBb,MAAxC,CAAgDW,CAAC,EAAjD,CAAqD,OAA5CA,CAA4C,EAYpD,EACF,EAED;AACAL,MAAM,CAACa,iBAAP,CAA2BZ,gBAA3B,CAEA;AACAA,gBAAgB,CAAG,EAAnB,CACD,EAED,MAAOH,CAAAA,QAAP,CACD,CA1CM,CA4CP,MAAO,IAAMgB,CAAAA,8BAA8B,CAAG,QAAjCA,CAAAA,8BAAiC,CAACjB,KAAD,CAAW,CACvD,GAAIkB,CAAAA,gBAAgB,CAAGlB,KAAvB,CAEA;AACA,IAAK,GAAIE,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGgB,gBAAgB,CAACrB,MAArC,CAA6CK,CAAC,EAA9C,CAAkD,CAChD,GAAMC,CAAAA,MAAM,CAAGe,gBAAgB,CAAChB,CAAD,CAA/B,CAEA;AACA;AAJgD,2BAKvCiB,CALuC,EAM9C,GAAMC,CAAAA,gBAAgB,CAAGjB,MAAM,CAACa,iBAAP,CAAyBG,CAAzB,CAAzB,CACA;AACA;AACAC,gBAAgB,CAACC,KAAjB,CAAyB,IAAzB,CACAD,gBAAgB,CAACE,IAAjB,CAAwB,IAAxB,CAEA;AACA;AACA;AACA;AACA,IAAK,GAAIC,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGpB,MAAM,CAACG,SAAP,CAAiBT,MAArC,CAA6C0B,CAAC,EAA9C,CAAkD,CAChD,GAAMhB,CAAAA,QAAQ,CAAGJ,MAAM,CAACG,SAAP,CAAiBiB,CAAjB,CAAjB,CAEA;AACA,GAAIZ,CAAAA,UAAU,CAAGJ,QAAQ,CAACG,UAAT,CAAoBE,IAApB,CAA0B,SAAAC,OAAO,QAAIA,CAAAA,OAAO,CAACC,IAAR,GAAiBM,gBAAgB,CAACN,IAAtC,EAAjC,CAAjB,CAEA;AACA,GAAIH,UAAJ,CAAgB,CACdS,gBAAgB,CAACC,KAAjB,GACD,EAED;AACA,GAAID,gBAAgB,CAACE,IAAjB,GAA0B,IAA9B,CAAoC,CAClC;AACA;AACA;AACAF,gBAAgB,CAACE,IAAjB,CAAwBhD,UAAU,CAACiC,QAAQ,CAACiB,KAAV,CAAlC,CACD,CACF,EAlC6C,EAKhD,IAAK,GAAIL,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGhB,MAAM,CAACa,iBAAP,CAAyBnB,MAA7C,CAAqDsB,CAAC,EAAtD,CAA0D,QAAjDA,CAAiD,EA8BzD,EACF,EACF,CAzCM,CA2CP,MAAO,IAAMM,CAAAA,mBAAmB,CAAG,QAAtBA,CAAAA,mBAAsB,CAACC,iBAAD,CAAoBC,oBAApB,CAA6C,CAE9E,GAAIC,CAAAA,IAAI,CAAGF,iBAAiB,CAACG,cAA7B,CAEA,GAAIC,CAAAA,IAAI,CAAGJ,iBAAiB,CAACK,eAA7B,CAEA;AACA,IAAK,GAAI7B,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGyB,oBAAoB,CAAC9B,MAAzC,CAAiDK,CAAC,EAAlD,CAAsD,CACpD,GAAM8B,CAAAA,aAAa,CAAGL,oBAAoB,CAACzB,CAAD,CAA1C,CAEA,GAAI+B,CAAAA,IAAI,CAAGD,aAAa,CAACE,QAAzB,CAEA,GAAIC,CAAAA,IAAI,CAAGH,aAAa,CAACI,SAAzB,CAEAJ,aAAa,CAACK,QAAd,CAAyBC,WAAW,CAACV,IAAD,CAAOE,IAAP,CAAaG,IAAb,CAAmBE,IAAnB,CAApC,CACD,EACF,CAhBM,CAkBP,GAAMG,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CAACV,IAAD,CAAOE,IAAP,CAAaG,IAAb,CAAmBE,IAAnB,CAA4B,CAC9C;AACA,GAAKP,IAAI,GAAKK,IAAV,EAAoBH,IAAI,GAAKK,IAAjC,CAAwC,CACtC,MAAO,EAAP,CACD,CACD;AAHA,IAIK,CACH,GAAII,CAAAA,OAAO,CAAGC,IAAI,CAACC,EAAL,CAAUb,IAAV,CAAiB,GAA/B,CACA,GAAIc,CAAAA,OAAO,CAAGF,IAAI,CAACC,EAAL,CAAUR,IAAV,CAAiB,GAA/B,CACA,GAAIU,CAAAA,KAAK,CAAGb,IAAI,CAAGK,IAAnB,CACA,GAAIS,CAAAA,QAAQ,CAAGJ,IAAI,CAACC,EAAL,CAAUE,KAAV,CAAkB,GAAjC,CACA,GAAIE,CAAAA,IAAI,CAAGL,IAAI,CAACM,GAAL,CAASP,OAAT,EAAoBC,IAAI,CAACM,GAAL,CAASJ,OAAT,CAApB,CAAwCF,IAAI,CAACO,GAAL,CAASR,OAAT,EAAoBC,IAAI,CAACO,GAAL,CAASL,OAAT,CAApB,CAAwCF,IAAI,CAACO,GAAL,CAASH,QAAT,CAA3F,CACA,GAAIC,IAAI,CAAG,CAAX,CAAc,CACZA,IAAI,CAAG,CAAP,CACD,CACDA,IAAI,CAAGL,IAAI,CAACQ,IAAL,CAAUH,IAAV,CAAP,CACAA,IAAI,CAAGA,IAAI,CAAG,GAAP,CAAaL,IAAI,CAACC,EAAzB,CACAI,IAAI,CAAGA,IAAI,CAAG,EAAP,CAAY,MAAnB,CACAA,IAAI,CAAGA,IAAI,CAAG,QAAd,CAAwB;AAExBA,IAAI,CAAGL,IAAI,CAACS,KAAL,CAAWJ,IAAI,CAAG,EAAlB,EAAwB,EAA/B,CAEA,MAAOA,CAAAA,IAAP,CACD,EACF,CAxBD,CA4BA,MAAO,IAAMK,CAAAA,0BAA0B,CAAG,QAA7BA,CAAAA,0BAA6B,CAAAC,WAAW,CAAI,CACvD;AACA,IAAK,GAAIjD,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGiD,WAAW,CAACtD,MAAhC,CAAwCK,CAAC,EAAzC,CAA6C,CAC3C,GAAMC,CAAAA,MAAM,CAAGgD,WAAW,CAACjD,CAAD,CAA1B,CAEA;AACA,IAAK,GAAIiB,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGhB,MAAM,CAACa,iBAAP,CAAyBnB,MAA7C,CAAqDsB,CAAC,EAAtD,CAA0D,CACxD,GAAMV,CAAAA,SAAS,CAAGN,MAAM,CAACa,iBAAP,CAAyBG,CAAzB,CAAlB,CAEA,GAAIV,SAAS,CAACK,IAAV,CAAejB,MAAf,CAAwB,GAA5B,CAAiC,CAC/BY,SAAS,CAACK,IAAV,CAAiBsC,aAAa,CAAC3C,SAAS,CAACK,IAAX,CAAiB,GAAjB,CAA9B,CACD,EAED,GAAIL,SAAS,CAAC4C,WAAV,CAAsBxD,MAAtB,CAA+B,GAAnC,CAAwC,CACtCY,SAAS,CAAC4C,WAAV,CAAwBD,aAAa,CAAC3C,SAAS,CAAC4C,WAAX,CAAwB,GAAxB,CAArC,CACD,EACF,EACF,EACF,CAlBM,CAoBP,GAAMD,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,CAACE,MAAD,CAASC,aAAT,CAA2B,CAC/C,MAAOD,CAAAA,MAAM,CAACE,KAAP,CAAa,CAAb,CAAgBD,aAAhB,EAAiC,OAAxC,CACD,CAFD","sourcesContent":["// SearchResultsUtils.js\n\nconst formatDate = dateString => {\n  /* \n\n    Input: \"2020-02-0 4 10:00:00\"\n    Output: \"Tirsdag d. 4 Feb. kl 10.00\"\n\n  */\n  let input = dateString;\n  // => e.g. \"2020-02-04 10:00:00\"\n\n  // Exchange the dashes in the date for slashes,\n  // this is needed for the subsequent \"new Date\"\" call to work in Safari\n  // e.g. \"2020-02-04 10:00:00\" to \"2020/02/04 10:00:00\"\n\n  // split the date string into an array of two elements: date and time\n  let splittedDateStr = input.split(\" \");\n  // split the date element into an array\n  let splittedDate = splittedDateStr[0].split(\"-\")\n  // join back the splitted date into a string seperated by a dash\n  let joinedDate = splittedDate.join(\"/\");\n  // concatenate the date with the time\n  let dateStrWithSlashes = joinedDate + \" \" + splittedDateStr[1];\n\n  // Convert the date in numbers, to a date including a weekday and month:\n  // e.g. \"2020/02/04 10:00:00\" => \"tirsdag 4. feb. 10.00\"\n  const options = \n        {weekday: 'long', month: 'short', day: 'numeric', hour: '2-digit', minute: '2-digit'};\n  const readableDate = new Date(dateStrWithSlashes).toLocaleDateString('da-DK', options);\n\n  // Make a nicer date: e.g. \"tirsdag 4. feb. 10.00\" => \"Tirsdag d. 4 Feb. kl 10.00\"\n  const dateArr = readableDate.split(' ');\n  // Cap the first letter of weekday\n  dateArr[0] = dateArr[0].charAt(0).toUpperCase() + dateArr[0].substring(1);\n  // Add a \"d.\" after the weekday, before the day number\n  dateArr.splice(1, 0, 'd.');\n  // Remove the ending dot from the day number ex: \"15.\" to \"15\"\n  dateArr[2] = dateArr[2].substring(0, dateArr[2].length -1);\n  // Cap the first letter of month\n  dateArr[3] = dateArr[3].charAt(0).toUpperCase() + dateArr[3].substring(1);\n  // Add a \"kl\" after the month, before the hour\n  dateArr.splice(4, 0, 'kl');\n  // Convert the array back into a string\n  const output = dateArr.join(\" \")\n\n  return output; // => e.g. \"Tirsdag d. 4 Feb. kl 10.00\"\n};\n\nexport const addTheTreatmentsOffered = (array) => {\n  let newArray = array;\n\n  // Loop through all of the saloons\n  for (let i = 0; i < newArray.length; i++) {\n    const saloon = newArray[i];\n\n    // Initiate an empty array\n    // that will be used to store the treatment\n    // that each saloon offers\n    let saloonTreatments = [];\n\n    // Loop through each saloons array of timeslots\n    for (let y = 0; y < saloon.timeslots.length; y++) {\n\n      // the timeslot is an array of objects\n      let timeslot = saloon.timeslots[y];\n\n      // Loop through the array of treatments, that is housed in each timeslot\n      for (let z = 0; z < timeslot.treatments.length; z++) {\n        const treatment = timeslot.treatments[z];\n\n        // check if the current looped through treatment's name is \n        // already in the saloonTreatments array\n        let isIncluded = saloonTreatments.some( element => element.name === treatment.name);\n\n        // if it is NOT already included\n        if (!isIncluded) {\n          // then push it to the saloonTreatments array\n          saloonTreatments.push(treatment)    \n        };\n      };\n    };\n\n    // add the new array of offered treatments to the saloon objects\n    saloon.treatmentsOffered = saloonTreatments;\n\n    // reset the saloonTreatments array before initializing a new loop\n    saloonTreatments = [];\n  };\n\n  return newArray;\n};\n\nexport const addCountAndNextToEachTreatment = (array) => {\n  let manipulatedArray = array;\n\n  // Loop through the saloons \n  for (let i = 0; i < manipulatedArray.length; i++) {\n    const saloon = manipulatedArray[i];\n\n    // Run an inner loop on the saloons treatmentsOffered array\n    // so we basically take the treatments offered list and start another loop\n    for (let j = 0; j < saloon.treatmentsOffered.length; j++) {\n      const treatmentOffered = saloon.treatmentsOffered[j];\n      // give the treatments offered object a new prop that will be\n      // incremented for everytime we find a matching treatment in each timeslot\n      treatmentOffered.count = null\n      treatmentOffered.next = null\n\n      // Run another inner loop on the saloons timeslots array\n      // The timeslots array contains an array of timeslot objects\n      // that all have a treatment prop that has an array of \n      // available treatments offered in that timeslot\n      for (let k = 0; k < saloon.timeslots.length; k++) {\n        const timeslot = saloon.timeslots[k];\n\n        // if the current timeslots treatment array contains the current treatmentOffered\n        let isIncluded = timeslot.treatments.some( element => element.name === treatmentOffered.name);\n  \n        // then add one to treatmentOffered.count\n        if (isIncluded) {\n          treatmentOffered.count++;\n        };\n\n        // add the next available timeslot if not already set\n        if (treatmentOffered.next === null) {\n          // here we could call a format date function that takes the date string\n          // and converts it into our desired format: Onsdag d. 15 April kl 10:00\n          //treatmentOffered.next = <FormatDate dateString={timeslot.start} />\n          treatmentOffered.next = formatDate(timeslot.start);\n        }\n      };\n    };\n  };\n};\n\nexport const addDistanceToSaloon = (clientCoordinates, arrayOfSaloonObjects) => {\n\n  let lat1 = clientCoordinates.clientLatitude;\n  \n  let lon1 = clientCoordinates.clientLongitude;\n\n  // loop through the array of saloon objects\n  for (let i = 0; i < arrayOfSaloonObjects.length; i++) {\n    const currentSaloon = arrayOfSaloonObjects[i];\n\n    let lat2 = currentSaloon.latitude;\n    \n    let lon2 = currentSaloon.longitude;\n\n    currentSaloon.distance = getDistance(lat1, lon1, lat2, lon2);\n  };\n};\n\nconst getDistance = (lat1, lon1, lat2, lon2) => {\n  // return a zero if the two sets of coordinates are the same\n  if ((lat1 === lat2) && (lon1 === lon2)) {\n    return 0;\n  }\n  // magic:\n  else {\n    var radlat1 = Math.PI * lat1 / 180;\n    var radlat2 = Math.PI * lat2 / 180;\n    var theta = lon1 - lon2;\n    var radtheta = Math.PI * theta / 180;\n    var dist = Math.sin(radlat1) * Math.sin(radlat2) + Math.cos(radlat1) * Math.cos(radlat2) * Math.cos(radtheta);\n    if (dist > 1) {\n      dist = 1;\n    }\n    dist = Math.acos(dist);\n    dist = dist * 180 / Math.PI;\n    dist = dist * 60 * 1.1515;\n    dist = dist * 1.609344; //km\n    \n    dist = Math.round(dist * 10) / 10\n\n    return dist;\n  };\n};\n\n\n\nexport const shortenTitleAndDescription = saloonArray => {\n  // Run an outer loop on the saloons\n  for (let i = 0; i < saloonArray.length; i++) {\n    const saloon = saloonArray[i];\n\n    // Run an inner loop on the treatments that each saloon offers\n    for (let j = 0; j < saloon.treatmentsOffered.length; j++) {\n      const treatment = saloon.treatmentsOffered[j];\n      \n      if (treatment.name.length > 100) {\n        treatment.name = shortenString(treatment.name, 100);\n      };\n\n      if (treatment.description.length > 250) {\n        treatment.description = shortenString(treatment.description, 250);\n      };\n    }; \n  };\n};\n\nconst shortenString = (string, desiredLength) => {\n  return string.slice(0, desiredLength) + \"[...]\";  \n};\n"]},"metadata":{},"sourceType":"module"}
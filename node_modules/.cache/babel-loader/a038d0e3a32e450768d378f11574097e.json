{"ast":null,"code":"var _jsxFileName = \"/Users/nestos/Desktop/Code/glowspace/src/components/Search/SearchForm.js\";\n// SearchForm.js\nimport React from 'react';\n\nconst SearchForm = props => {\n  // #refactor!\n  // get the boolean values from the this.state object\n  // that will be passed to the children components\n  // and slice to remove the from and date values (this is not the most ideal solution\n  // because the slice will run everytime the render function runs, it would be better \n  // to handle this in the constructor, by setting two object in the state - one for \n  // the treatment and labels, and another for the dates )\n  let checkedUncheckedValuesArrray = Object.values(this.state).slice(0, 5); // get an array contain only the selected formatted labels\n  // that will be passed to the Dropwdown component\n  // and used by the component to output the chosen treatment(s)\n\n  let chosenLabels = formatSelectedLabels(getSelectedLabels(this.state));\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"StartSearch-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(TreatmentButtonsList, {\n    labels: this.labels,\n    isChecked: checkedUncheckedValuesArrray,\n    onClick: this.handleClick,\n    icons: this.props.icons,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Dropdown, {\n    labels: this.labels,\n    chosenLabels: chosenLabels,\n    isChecked: checkedUncheckedValuesArrray,\n    onClick: this.handleClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(CalendarDropdown, {\n    from: this.state.from,\n    to: this.state.to,\n    handleDateClick: this.handleDateClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(SubmitButton, {\n    handleClick: this.handleSubmitClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default SearchForm;\n/* \n\n  Helper Functions\n\n*/\n// takes the state object and returns an array,\n// that contains the chosen treatments - \n// treatments with a value of true\n\nconst getSelectedLabels = obj => {\n  // get an array of the components state key/value pars,\n  // this will result in an array of nested arrays\n  // and remove the 'from' and 'to' from the array\n  let objectsKeyValPairsArr = Object.entries(obj).slice(0, 5); // initiate an empty array that will store the selected labels only\n\n  const selectedLabelsArray = []; // loop through the objectsKeyValPairsArr (its an array of arrays)\n\n  objectsKeyValPairsArr.forEach((currentElement, i) => {\n    // in the current element ([<label>],[<isChecked>]),\n    // if isChecked is true   \n    if (currentElement[1]) {\n      // then push the label to the selectedLabelsArray\n      selectedLabelsArray.push(currentElement[0]);\n    }\n\n    ;\n  });\n  return selectedLabelsArray;\n}; // helper function, formatSelectedLabels,\n// takes an array contain the selected labels\n// and returns a new array with the formatted labels\n// for the dropdown component\n\n\nconst formatSelectedLabels = arr => {\n  // create a new array where each element has a space before the string,\n  // if not used, the result is: <label>,<label>,<label>\n  let formattedLabels = arr.map(element => \" \" + element);\n  return formattedLabels;\n};","map":{"version":3,"sources":["/Users/nestos/Desktop/Code/glowspace/src/components/Search/SearchForm.js"],"names":["React","SearchForm","props","checkedUncheckedValuesArrray","Object","values","state","slice","chosenLabels","formatSelectedLabels","getSelectedLabels","labels","handleClick","icons","from","to","handleDateClick","handleSubmitClick","obj","objectsKeyValPairsArr","entries","selectedLabelsArray","forEach","currentElement","i","push","arr","formattedLabels","map","element"],"mappings":";AAAA;AAEA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,UAAU,GAAGC,KAAK,IAAI;AAC1B;AACE;AACA;AACA;AACA;AACA;AACA;AACA,MAAIC,4BAA4B,GAAGC,MAAM,CAACC,MAAP,CAAc,KAAKC,KAAnB,EAA0BC,KAA1B,CAAgC,CAAhC,EAAkC,CAAlC,CAAnC,CARwB,CAUxB;AACA;AACA;;AACA,MAAIC,YAAY,GAAGC,oBAAoB,CAACC,iBAAiB,CAAC,KAAKJ,KAAN,CAAlB,CAAvC;AAEF,sBACE;AAAK,IAAA,SAAS,EAAC,qBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAGE,oBAAC,oBAAD;AACE,IAAA,MAAM,EAAE,KAAKK,MADf;AAEE,IAAA,SAAS,EAAER,4BAFb;AAGE,IAAA,OAAO,EAAE,KAAKS,WAHhB;AAIE,IAAA,KAAK,EAAE,KAAKV,KAAL,CAAWW,KAJpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF,eAWE,oBAAC,QAAD;AACE,IAAA,MAAM,EAAE,KAAKF,MADf;AAEE,IAAA,YAAY,EAAEH,YAFhB;AAGE,IAAA,SAAS,EAAEL,4BAHb;AAIE,IAAA,OAAO,EAAE,KAAKS,WAJhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAXF,eAmBE,oBAAC,gBAAD;AACE,IAAA,IAAI,EAAE,KAAKN,KAAL,CAAWQ,IADnB;AAEE,IAAA,EAAE,EAAE,KAAKR,KAAL,CAAWS,EAFjB;AAGE,IAAA,eAAe,EAAE,KAAKC,eAHxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAnBF,eA0BE,oBAAC,YAAD;AACE,IAAA,WAAW,EAAE,KAAKC,iBADpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA1BF,CADF;AAgCD,CA/CD;;AAiDA,eAAehB,UAAf;AAGA;;;;;AAMA;AACA;AACA;;AACA,MAAMS,iBAAiB,GAAGQ,GAAG,IAAI;AAG/B;AACA;AACA;AACA,MAAIC,qBAAqB,GAAGf,MAAM,CAACgB,OAAP,CAAeF,GAAf,EAAoBX,KAApB,CAA0B,CAA1B,EAA4B,CAA5B,CAA5B,CAN+B,CAQ/B;;AACA,QAAMc,mBAAmB,GAAG,EAA5B,CAT+B,CAW/B;;AACAF,EAAAA,qBAAqB,CAACG,OAAtB,CAA+B,CAACC,cAAD,EAAiBC,CAAjB,KAAuB;AACpD;AACA;AACA,QAAGD,cAAc,CAAC,CAAD,CAAjB,EAAsB;AACpB;AACAF,MAAAA,mBAAmB,CAACI,IAApB,CAAyBF,cAAc,CAAC,CAAD,CAAvC;AACD;;AAAA;AACF,GAPD;AASA,SAAOF,mBAAP;AACD,CAtBD,C,CAwBA;AACA;AACA;AACA;;;AACA,MAAMZ,oBAAoB,GAAGiB,GAAG,IAAI;AAClC;AACA;AACA,MAAIC,eAAe,GAAGD,GAAG,CAACE,GAAJ,CAASC,OAAO,IAAI,MAAMA,OAA1B,CAAtB;AAEA,SAAOF,eAAP;AACD,CAND","sourcesContent":["// SearchForm.js\n\nimport React from 'react';\n\nconst SearchForm = props => {\n  // #refactor!\n    // get the boolean values from the this.state object\n    // that will be passed to the children components\n    // and slice to remove the from and date values (this is not the most ideal solution\n    // because the slice will run everytime the render function runs, it would be better \n    // to handle this in the constructor, by setting two object in the state - one for \n    // the treatment and labels, and another for the dates )\n    let checkedUncheckedValuesArrray = Object.values(this.state).slice(0,5)\n\n    // get an array contain only the selected formatted labels\n    // that will be passed to the Dropwdown component\n    // and used by the component to output the chosen treatment(s)\n    let chosenLabels = formatSelectedLabels(getSelectedLabels(this.state));\n\n  return(\n    <div className=\"StartSearch-wrapper\">\n\n      {/* Render a TreatmentButtonsList and pass it some props */}\n      <TreatmentButtonsList\n        labels={this.labels}\n        isChecked={checkedUncheckedValuesArrray}\n        onClick={this.handleClick}\n        icons={this.props.icons}\n      />\n\n      {/* Render a Dropdown and pass it some props */}\n      <Dropdown \n        labels={this.labels}\n        chosenLabels={chosenLabels}\n        isChecked={checkedUncheckedValuesArrray}\n        onClick={this.handleClick}\n      />\n\n      {/* Render the CalendarDropdown component that contains a SingleDatePicker */}\n      <CalendarDropdown \n        from={this.state.from}\n        to={this.state.to}\n        handleDateClick={this.handleDateClick}\n      />\n\n      {/* Submit Button */}\n      <SubmitButton \n        handleClick={this.handleSubmitClick}\n      />\n    </div>\n  )\n}\n\nexport default SearchForm;\n\n\n/* \n\n  Helper Functions\n\n*/\n\n// takes the state object and returns an array,\n// that contains the chosen treatments - \n// treatments with a value of true\nconst getSelectedLabels = obj => {\n\n\n  // get an array of the components state key/value pars,\n  // this will result in an array of nested arrays\n  // and remove the 'from' and 'to' from the array\n  let objectsKeyValPairsArr = Object.entries(obj).slice(0,5)\n\n  // initiate an empty array that will store the selected labels only\n  const selectedLabelsArray = [];\n\n  // loop through the objectsKeyValPairsArr (its an array of arrays)\n  objectsKeyValPairsArr.forEach( (currentElement, i) => {\n    // in the current element ([<label>],[<isChecked>]),\n    // if isChecked is true   \n    if(currentElement[1]) {\n      // then push the label to the selectedLabelsArray\n      selectedLabelsArray.push(currentElement[0])\n    };\n  });\n\n  return selectedLabelsArray;\n};\n\n// helper function, formatSelectedLabels,\n// takes an array contain the selected labels\n// and returns a new array with the formatted labels\n// for the dropdown component\nconst formatSelectedLabels = arr => {\n  // create a new array where each element has a space before the string,\n  // if not used, the result is: <label>,<label>,<label>\n  let formattedLabels = arr.map( element => \" \" + element);\n\n  return formattedLabels;\n};\n\n"]},"metadata":{},"sourceType":"module"}
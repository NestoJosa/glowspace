{"ast":null,"code":"var _jsxFileName = \"/Users/nestos/Desktop/Code/glowspace/src/components/Search/SearchForm/SearchFormContainer.js\";\n// SearchFormContainer.js\nimport React, { Component } from \"react\";\nimport SearchForm from './SearchForm'; // Import the icons\n\nimport iconHair from \"../../../assets/icons/hair.svg\";\nimport iconFace from \"../../../assets/icons/face.svg\";\nimport iconHand from \"../../../assets/icons/hand.svg\";\nimport iconBody from \"../../../assets/icons/body.svg\";\nimport iconFeet from \"../../../assets/icons/feet.svg\";\nimport { Form } from \"formik\"; // Create an object for the labels in different languages\n\nlet treatmentAreas = {\n  eng: ['Hair', 'Face', 'Hands', 'Body', 'Feet'],\n  dk: ['Hår', 'Ansigt', 'Hænder', 'Krop', 'Fødder']\n}; // WARNING: currently it will not work to change the language settings \n\nlet locale = 'dk'; // Create an object for the treatmentAreaData\n\nconst treatmentAreaData = {\n  hair: {\n    label: treatmentAreas[locale][0],\n    isActive: true,\n    icon: iconHair\n  },\n  face: {\n    label: treatmentAreas[locale][1],\n    isActive: true,\n    icon: iconFace\n  },\n  hands: {\n    label: treatmentAreas[locale][2],\n    isActive: true,\n    icon: iconHand\n  },\n  body: {\n    label: treatmentAreas[locale][3],\n    isActive: true,\n    icon: iconBody\n  },\n  feet: {\n    label: treatmentAreas[locale][4],\n    isActive: true,\n    icon: iconFeet\n  }\n};\n\nclass SearchFormContainer extends Component {\n  constructor(props) {\n    super(props); // Set the initial default values\n\n    this.state = {\n      [treatmentAreaData['hair'].label]: treatmentAreaData['hair'].isActive,\n      [treatmentAreaData['face'].label]: treatmentAreaData['face'].isActive,\n      [treatmentAreaData['hands'].label]: treatmentAreaData['hands'].isActive,\n      [treatmentAreaData['body'].label]: treatmentAreaData['body'].isActive,\n      [treatmentAreaData['feet'].label]: treatmentAreaData['feet'].isActive,\n      from: null,\n      to: null\n    }; // Create a list of icons. Note: we are looping through the treatmentAreaData-obj, \n    // NOT the state object, because these vals will not change\n\n    this.treatmentAreaIconList = Object.entries(treatmentAreaData).map(currEl => currEl[1].icon); // Binders\n\n    this.handleClick = this.handleClick.bind(this);\n    this.handleDateClick = this.handleDateClick.bind(this);\n    this.handleSubmitClick = this.handleSubmitClick.bind(this);\n  } // toggle the clicked treatment-area isActive value\n\n\n  handleClick(clickedTreatmentArea) {\n    this.setState({\n      [clickedTreatmentArea]: !this.state[clickedTreatmentArea]\n    });\n  }\n\n  handleDateClick(e) {\n    this.setState({\n      from: e.from,\n      to: e.to\n    });\n  }\n\n  handleSubmitClick() {\n    this.props.getSearchResults(this.state);\n  }\n\n  render() {\n    let treatAreaAndIsActivePairs = Object.entries(this.state).slice(0, 5);\n    let treatAreaDropdownLabel = getTreatAreaLabel(getActiveTreatAreas(treatAreaAndIsActivePairs));\n    let pickDateDropdownLabel = getPickDateDropdownLabel(this.state.from, this.state.to);\n    console.log(pickDateDropdownLabel);\n    return /*#__PURE__*/React.createElement(SearchForm, {\n      treatAreaAndIsActivePairs: treatAreaAndIsActivePairs,\n      treatAreaIcons: this.treatmentAreaIconList,\n      treatAreaDropdownLabel: treatAreaDropdownLabel,\n      onClick: this.handleClick // props for DatePicker\n      ,\n      from: this.state.from,\n      to: this.state.to,\n      pickDateLabel: pickDateDropdownLabel,\n      onDateClick: this.handleDateClick // pass the method used to get search results\n      ,\n      getSearchResults: this.handleSubmitClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 7\n      }\n    });\n  }\n\n}\n\nexport default SearchFormContainer;\n/* \n\n  Helper Functions\n\n*/\n// takes a list of treatment-area and is-active pairs: e.g [['Hair', true], ['Face', false], ['Hands', true]]\n// returns a list of active treatment areas only:  e.g. ['Hair', 'Hands']\n\nconst getActiveTreatAreas = entries => entries.filter(currEl => currEl[1] === true).map(currEl => currEl[0]); // takes a list of treatment areas: ['Hair', 'Hands']\n// returns a new formatted list of treat areas: [['Hair', ', Hands']]\n// note the inclusion of a comma sign and space starting from the second element\n\n\nconst getTreatAreaLabel = arr => {\n  let newLabel = []; // return a custom msg e.g. \"Chose treatment area\" if no areas chosen\n\n  if (arr.length === 0) {\n    newLabel.push(\"Vælg behandlings område\");\n  } // do not format if only one element in the list\n  else if (arr.length === 1) {\n      newLabel.push(arr[0]);\n    } else if (arr.length > 1) {\n      // push the first area to the new list\n      newLabel.push(arr[0]); // then format and push the rest\n\n      for (let i = 1; i < arr.length; i++) {\n        newLabel.push(', ' + arr[i]);\n      }\n    }\n\n  return newLabel;\n}; // takes a from and to date object\n// returns a label for the pickDateDropdown\n\n\nconst getPickDateDropdownLabel = (fromDatefrom, to) => {\n  let fromDate = from ? `${from.day}/${from.month}` : null;\n  let toDate = to ? `${to.day}/${to.month}` : null;\n  let label;\n\n  if (!fromDate) {\n    label = 'Chose date range';\n  } else if (fromDate && !toDate) {\n    label = frofromDatem;\n  } else if (fromDate && to) {\n    label = from + \" - \" + to;\n  }\n\n  return label;\n};","map":{"version":3,"sources":["/Users/nestos/Desktop/Code/glowspace/src/components/Search/SearchForm/SearchFormContainer.js"],"names":["React","Component","SearchForm","Form","treatmentAreas","eng","dk","locale","treatmentAreaData","hair","label","isActive","icon","iconHair","face","iconFace","hands","iconHand","body","iconBody","feet","iconFeet","SearchFormContainer","constructor","props","state","from","to","treatmentAreaIconList","Object","entries","map","currEl","handleClick","bind","handleDateClick","handleSubmitClick","clickedTreatmentArea","setState","e","getSearchResults","render","treatAreaAndIsActivePairs","slice","treatAreaDropdownLabel","getTreatAreaLabel","getActiveTreatAreas","pickDateDropdownLabel","getPickDateDropdownLabel","console","log","filter","arr","newLabel","length","push","i","fromDatefrom","fromDate","day","month","toDate","frofromDatem"],"mappings":"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","sourcesContent":["// SearchFormContainer.js\n\nimport React, { Component } from \"react\";\nimport SearchForm from './SearchForm';\n\n// Import the icons\nimport iconHair from '../../../assets/icons/hair.svg';\nimport iconFace from '../../../assets/icons/face.svg';\nimport iconHand from '../../../assets/icons/hand.svg';\nimport iconBody from '../../../assets/icons/body.svg';\nimport iconFeet from '../../../assets/icons/feet.svg';\nimport { Form } from \"formik\";\n\n// Create an object for the labels in different languages\nlet treatmentAreas = {\n  eng: ['Hair', 'Face', 'Hands', 'Body', 'Feet'],\n  dk: ['Hår', 'Ansigt', 'Hænder', 'Krop', 'Fødder'],\n}\n\n// WARNING: currently it will not work to change the language settings \nlet locale = 'dk';\n\n// Create an object for the treatmentAreaData\nconst treatmentAreaData = {\n  hair: {\n    label: treatmentAreas[locale][0],\n    isActive: true,\n    icon: iconHair,\n  },\n  face: {\n    label: treatmentAreas[locale][1],\n    isActive: true,\n    icon: iconFace,\n  },\n  hands: {\n    label: treatmentAreas[locale][2],\n    isActive: true,\n    icon: iconHand,\n  },\n  body: {\n    label: treatmentAreas[locale][3],\n    isActive: true,\n    icon: iconBody,\n  },\n  feet: {\n    label: treatmentAreas[locale][4],\n    isActive: true,\n    icon: iconFeet,\n  },\n}\n\nclass SearchFormContainer extends Component {\n  constructor(props) {\n    super(props);\n\n    // Set the initial default values\n    this.state = {\n      [treatmentAreaData['hair'].label]:  treatmentAreaData['hair'].isActive,\n      [treatmentAreaData['face'].label]:  treatmentAreaData['face'].isActive,\n      [treatmentAreaData['hands'].label]: treatmentAreaData['hands'].isActive,\n      [treatmentAreaData['body'].label]:  treatmentAreaData['body'].isActive,\n      [treatmentAreaData['feet'].label]:  treatmentAreaData['feet'].isActive,\n      from: null,\n      to: null, \n    }\n\n    // Create a list of icons. Note: we are looping through the treatmentAreaData-obj, \n    // NOT the state object, because these vals will not change\n    this.treatmentAreaIconList = Object.entries(treatmentAreaData).map( currEl => currEl[1].icon);\n\n    // Binders\n    this.handleClick = this.handleClick.bind(this);\n    this.handleDateClick = this.handleDateClick.bind(this);\n    this.handleSubmitClick = this.handleSubmitClick.bind(this);\n  }\n\n  // toggle the clicked treatment-area isActive value\n  handleClick(clickedTreatmentArea) {\n    this.setState({ [clickedTreatmentArea]: !this.state[clickedTreatmentArea] });\n  }\n\n  handleDateClick(e) {\n    this.setState({\n      from: e.from,\n      to: e.to\n    });\n  }\n\n  handleSubmitClick() {\n    this.props.getSearchResults(this.state); \n  }\n\n  render() {\n    let treatAreaAndIsActivePairs = Object.entries(this.state).slice(0,5);\n\n    let treatAreaDropdownLabel = getTreatAreaLabel(getActiveTreatAreas(treatAreaAndIsActivePairs));\n\n    let pickDateDropdownLabel = getPickDateDropdownLabel(this.state.from, this.state.to)\n    console.log(pickDateDropdownLabel);\n      \n    return(\n      <SearchForm\n        treatAreaAndIsActivePairs={treatAreaAndIsActivePairs}\n        treatAreaIcons={this.treatmentAreaIconList}\n        treatAreaDropdownLabel={treatAreaDropdownLabel}\n        onClick={this.handleClick}\n        // props for DatePicker\n        from={this.state.from} \n        to={this.state.to}\n        pickDateLabel={pickDateDropdownLabel}\n        onDateClick={this.handleDateClick} \n        // pass the method used to get search results\n        getSearchResults={this.handleSubmitClick}\n      />\n    )\n  }\n}\n\nexport default SearchFormContainer;\n\n\n/* \n\n  Helper Functions\n\n*/\n\n// takes a list of treatment-area and is-active pairs: e.g [['Hair', true], ['Face', false], ['Hands', true]]\n// returns a list of active treatment areas only:  e.g. ['Hair', 'Hands']\nconst getActiveTreatAreas = entries => entries.filter(currEl => currEl[1] === true).map(currEl => currEl[0]);\n          \n\n// takes a list of treatment areas: ['Hair', 'Hands']\n// returns a new formatted list of treat areas: [['Hair', ', Hands']]\n// note the inclusion of a comma sign and space starting from the second element\nconst getTreatAreaLabel = arr => {\n  let newLabel = [];\n  \n  // return a custom msg e.g. \"Chose treatment area\" if no areas chosen\n  if (arr.length === 0) { \n    newLabel.push(\"Vælg behandlings område\"); \n  }\n  \n  // do not format if only one element in the list\n  else if (arr.length === 1) { \n    newLabel.push(arr[0]); \n  }\n  \n  else if (arr.length > 1) {\n    // push the first area to the new list\n    newLabel.push(arr[0])\n    // then format and push the rest\n    for (let i = 1; i < arr.length; i++) { newLabel.push(', ' + arr[i]); }\n  }\n\n  return newLabel;\n};\n\n// takes a from and to date object\n// returns a label for the pickDateDropdown\nconst getPickDateDropdownLabel = (fromDatefrom, to) => {\n  let fromDate = from ? `${from.day}/${from.month}` : null ;\n  let toDate = to ? `${to.day}/${to.month}` : null ;\n  \n  let label;\n\n  if (!fromDate) {\n    label = 'Chose date range'\n  }\n\n  else if (fromDate && !toDate) {\n    label = frofromDatem\n  }\n\n  else if (fromDate && to) {\n    label = from + \" - \" + to\n  }\n\n  return label;\n}"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"// SearchResultsUtils.js\nconst formatDate = dateString => {\n  /* \n     Input: \"2020-02-0 4 10:00:00\"\n    Output: \"Tirsdag d. 4 Feb. kl 10.00\"\n   */\n  let input = dateString; // => e.g. \"2020-02-04 10:00:00\"\n  // Exchange the dashes in the date for slashes,\n  // this is needed for the subsequent \"new Date\"\" call to work in Safari\n  // e.g. \"2020-02-04 10:00:00\" to \"2020/02/04 10:00:00\"\n  // split the date string into an array of two elements: date and time\n\n  let splittedDateStr = input.split(\" \"); // split the date element into an array\n\n  let splittedDate = splittedDateStr[0].split(\"-\"); // join back the splitted date into a string seperated by a dash\n\n  let joinedDate = splittedDate.join(\"/\"); // concatenate the date with the time\n\n  let dateStrWithSlashes = joinedDate + \" \" + splittedDateStr[1]; // Convert the date in numbers, to a date including a weekday and month:\n  // e.g. \"2020/02/04 10:00:00\" => \"tirsdag 4. feb. 10.00\"\n\n  const options = {\n    weekday: 'long',\n    month: 'short',\n    day: 'numeric',\n    hour: '2-digit',\n    minute: '2-digit'\n  };\n  const readableDate = new Date(dateStrWithSlashes).toLocaleDateString('da-DK', options); // Make a nicer date: e.g. \"tirsdag 4. feb. 10.00\" => \"Tirsdag d. 4 Feb. kl 10.00\"\n\n  const dateArr = readableDate.split(' '); // Cap the first letter of weekday\n\n  dateArr[0] = dateArr[0].charAt(0).toUpperCase() + dateArr[0].substring(1); // Add a \"d.\" after the weekday, before the day number\n\n  dateArr.splice(1, 0, 'd.'); // Remove the ending dot from the day number ex: \"15.\" to \"15\"\n\n  dateArr[2] = dateArr[2].substring(0, dateArr[2].length - 1); // Cap the first letter of month\n\n  dateArr[3] = dateArr[3].charAt(0).toUpperCase() + dateArr[3].substring(1); // Add a \"kl\" after the month, before the hour\n\n  dateArr.splice(4, 0, 'kl'); // Convert the array back into a string\n\n  const output = dateArr.join(\" \");\n  return output; // => e.g. \"Tirsdag d. 4 Feb. kl 10.00\"\n};\n\nexport const addTheTreatmentsOffered = array => {\n  let newArray = array; // Loop through all of the saloons\n\n  for (let i = 0; i < newArray.length; i++) {\n    const saloon = newArray[i]; // Initiate an empty array\n    // that will be used to store the treatment\n    // that each saloon offers\n\n    let saloonTreatments = []; // Loop through each saloons array of timeslots\n\n    for (let y = 0; y < saloon.timeslots.length; y++) {\n      // the timeslot is an array of objects\n      let timeslot = saloon.timeslots[y]; // Loop through the array of treatments, that is housed in each timeslot\n\n      for (let z = 0; z < timeslot.treatments.length; z++) {\n        const treatment = timeslot.treatments[z]; // check if the current looped through treatment's name is \n        // already in the saloonTreatments array\n\n        let isIncluded = saloonTreatments.some(element => element.name === treatment.name); // if it is NOT already included\n\n        if (!isIncluded) {\n          // then push it to the saloonTreatments array\n          saloonTreatments.push(treatment);\n        }\n\n        ;\n      }\n\n      ;\n    }\n\n    ; // add the new array of offered treatments to the saloon objects\n\n    saloon.treatmentsOffered = saloonTreatments; // reset the saloonTreatments array before initializing a new loop\n\n    saloonTreatments = [];\n  }\n\n  ;\n  return newArray;\n};\nexport const addCountAndNextToEachTreatment = array => {\n  let manipulatedArray = array; // Loop through the saloons \n\n  for (let i = 0; i < manipulatedArray.length; i++) {\n    const saloon = manipulatedArray[i]; // Run an inner loop on the saloons treatmentsOffered array\n    // so we basically take the treatments offered list and start another loop\n\n    for (let j = 0; j < saloon.treatmentsOffered.length; j++) {\n      const treatmentOffered = saloon.treatmentsOffered[j]; // give the treatments offered object a new prop that will be\n      // incremented for everytime we find a matching treatment in each timeslot\n\n      treatmentOffered.count = null;\n      treatmentOffered.next = null; // Run another inner loop on the saloons timeslots array\n      // The timeslots array contains an array of timeslot objects\n      // that all have a treatment prop that has an array of \n      // available treatments offered in that timeslot\n\n      for (let k = 0; k < saloon.timeslots.length; k++) {\n        const timeslot = saloon.timeslots[k]; // if the current timeslots treatment array contains the current treatmentOffered\n\n        let isIncluded = timeslot.treatments.some(element => element.name === treatmentOffered.name); // then add one to treatmentOffered.count\n\n        if (isIncluded) {\n          treatmentOffered.count++;\n        }\n\n        ; // add the next available timeslot if not already set\n\n        if (treatmentOffered.next === null) {\n          // here we could call a format date function that takes the date string\n          // and converts it into our desired format: Onsdag d. 15 April kl 10:00\n          //treatmentOffered.next = <FormatDate dateString={timeslot.start} />\n          treatmentOffered.next = formatDate(timeslot.start);\n        }\n      }\n\n      ;\n    }\n\n    ;\n  }\n\n  ;\n};\nexport const addDistanceToSaloon = (clientCoordinates, arrayOfSaloonObjects) => {\n  let lat1 = clientCoordinates.clientLatitude;\n  let lon1 = clientCoordinates.clientLongitude; // loop through the array of saloon objects\n\n  for (let i = 0; i < arrayOfSaloonObjects.length; i++) {\n    const currentSaloon = arrayOfSaloonObjects[i];\n    let lat2 = currentSaloon.latitude;\n    let lon2 = currentSaloon.longitude;\n    currentSaloon.distance = getDistance(lat1, lon1, lat2, lon2);\n  }\n\n  ;\n};\n\nconst getDistance = (lat1, lon1, lat2, lon2) => {\n  // return a zero if the two sets of coordinates are the same\n  if (lat1 === lat2 && lon1 === lon2) {\n    return 0;\n  } // magic:\n  else {\n      var radlat1 = Math.PI * lat1 / 180;\n      var radlat2 = Math.PI * lat2 / 180;\n      var theta = lon1 - lon2;\n      var radtheta = Math.PI * theta / 180;\n      var dist = Math.sin(radlat1) * Math.sin(radlat2) + Math.cos(radlat1) * Math.cos(radlat2) * Math.cos(radtheta);\n\n      if (dist > 1) {\n        dist = 1;\n      }\n\n      dist = Math.acos(dist);\n      dist = dist * 180 / Math.PI;\n      dist = dist * 60 * 1.1515;\n      dist = dist * 1.609344; //km\n\n      dist = Math.round(dist * 10) / 10;\n      return dist;\n    }\n\n  ;\n};","map":{"version":3,"sources":["/Users/nestos/Desktop/Code/glowspace/src/components/Search/SearchResults/Utils/SearchResultsUtils.js"],"names":["formatDate","dateString","input","splittedDateStr","split","splittedDate","joinedDate","join","dateStrWithSlashes","options","weekday","month","day","hour","minute","readableDate","Date","toLocaleDateString","dateArr","charAt","toUpperCase","substring","splice","length","output","addTheTreatmentsOffered","array","newArray","i","saloon","saloonTreatments","y","timeslots","timeslot","z","treatments","treatment","isIncluded","some","element","name","push","treatmentsOffered","addCountAndNextToEachTreatment","manipulatedArray","j","treatmentOffered","count","next","k","start","addDistanceToSaloon","clientCoordinates","arrayOfSaloonObjects","lat1","clientLatitude","lon1","clientLongitude","currentSaloon","lat2","latitude","lon2","longitude","distance","getDistance","radlat1","Math","PI","radlat2","theta","radtheta","dist","sin","cos","acos","round"],"mappings":"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","sourcesContent":["// SearchResultsUtils.js\n\nconst formatDate = dateString => {\n  /* \n\n    Input: \"2020-02-0 4 10:00:00\"\n    Output: \"Tirsdag d. 4 Feb. kl 10.00\"\n\n  */\n  let input = dateString;\n  // => e.g. \"2020-02-04 10:00:00\"\n\n  // Exchange the dashes in the date for slashes,\n  // this is needed for the subsequent \"new Date\"\" call to work in Safari\n  // e.g. \"2020-02-04 10:00:00\" to \"2020/02/04 10:00:00\"\n\n  // split the date string into an array of two elements: date and time\n  let splittedDateStr = input.split(\" \");\n  // split the date element into an array\n  let splittedDate = splittedDateStr[0].split(\"-\")\n  // join back the splitted date into a string seperated by a dash\n  let joinedDate = splittedDate.join(\"/\");\n  // concatenate the date with the time\n  let dateStrWithSlashes = joinedDate + \" \" + splittedDateStr[1];\n\n  // Convert the date in numbers, to a date including a weekday and month:\n  // e.g. \"2020/02/04 10:00:00\" => \"tirsdag 4. feb. 10.00\"\n  const options = \n        {weekday: 'long', month: 'short', day: 'numeric', hour: '2-digit', minute: '2-digit'};\n  const readableDate = new Date(dateStrWithSlashes).toLocaleDateString('da-DK', options);\n\n  // Make a nicer date: e.g. \"tirsdag 4. feb. 10.00\" => \"Tirsdag d. 4 Feb. kl 10.00\"\n  const dateArr = readableDate.split(' ');\n  // Cap the first letter of weekday\n  dateArr[0] = dateArr[0].charAt(0).toUpperCase() + dateArr[0].substring(1);\n  // Add a \"d.\" after the weekday, before the day number\n  dateArr.splice(1, 0, 'd.');\n  // Remove the ending dot from the day number ex: \"15.\" to \"15\"\n  dateArr[2] = dateArr[2].substring(0, dateArr[2].length -1);\n  // Cap the first letter of month\n  dateArr[3] = dateArr[3].charAt(0).toUpperCase() + dateArr[3].substring(1);\n  // Add a \"kl\" after the month, before the hour\n  dateArr.splice(4, 0, 'kl');\n  // Convert the array back into a string\n  const output = dateArr.join(\" \")\n\n  return output; // => e.g. \"Tirsdag d. 4 Feb. kl 10.00\"\n};\n\nexport const addTheTreatmentsOffered = (array) => {\n  let newArray = array;\n\n  // Loop through all of the saloons\n  for (let i = 0; i < newArray.length; i++) {\n    const saloon = newArray[i];\n\n    // Initiate an empty array\n    // that will be used to store the treatment\n    // that each saloon offers\n    let saloonTreatments = [];\n\n    // Loop through each saloons array of timeslots\n    for (let y = 0; y < saloon.timeslots.length; y++) {\n\n      // the timeslot is an array of objects\n      let timeslot = saloon.timeslots[y];\n\n      // Loop through the array of treatments, that is housed in each timeslot\n      for (let z = 0; z < timeslot.treatments.length; z++) {\n        const treatment = timeslot.treatments[z];\n\n        // check if the current looped through treatment's name is \n        // already in the saloonTreatments array\n        let isIncluded = saloonTreatments.some( element => element.name === treatment.name);\n\n        // if it is NOT already included\n        if (!isIncluded) {\n          // then push it to the saloonTreatments array\n          saloonTreatments.push(treatment)    \n        };\n      };\n    };\n\n    // add the new array of offered treatments to the saloon objects\n    saloon.treatmentsOffered = saloonTreatments;\n\n    // reset the saloonTreatments array before initializing a new loop\n    saloonTreatments = [];\n  };\n\n  return newArray;\n};\n\nexport const addCountAndNextToEachTreatment = (array) => {\n  let manipulatedArray = array;\n\n  // Loop through the saloons \n  for (let i = 0; i < manipulatedArray.length; i++) {\n    const saloon = manipulatedArray[i];\n\n    // Run an inner loop on the saloons treatmentsOffered array\n    // so we basically take the treatments offered list and start another loop\n    for (let j = 0; j < saloon.treatmentsOffered.length; j++) {\n      const treatmentOffered = saloon.treatmentsOffered[j];\n      // give the treatments offered object a new prop that will be\n      // incremented for everytime we find a matching treatment in each timeslot\n      treatmentOffered.count = null\n      treatmentOffered.next = null\n\n      // Run another inner loop on the saloons timeslots array\n      // The timeslots array contains an array of timeslot objects\n      // that all have a treatment prop that has an array of \n      // available treatments offered in that timeslot\n      for (let k = 0; k < saloon.timeslots.length; k++) {\n        const timeslot = saloon.timeslots[k];\n\n        // if the current timeslots treatment array contains the current treatmentOffered\n        let isIncluded = timeslot.treatments.some( element => element.name === treatmentOffered.name);\n  \n        // then add one to treatmentOffered.count\n        if (isIncluded) {\n          treatmentOffered.count++;\n        };\n\n        // add the next available timeslot if not already set\n        if (treatmentOffered.next === null) {\n          // here we could call a format date function that takes the date string\n          // and converts it into our desired format: Onsdag d. 15 April kl 10:00\n          //treatmentOffered.next = <FormatDate dateString={timeslot.start} />\n          treatmentOffered.next = formatDate(timeslot.start);\n        }\n      };\n    };\n  };\n};\n\nexport const addDistanceToSaloon = (clientCoordinates, arrayOfSaloonObjects) => {\n\n  let lat1 = clientCoordinates.clientLatitude;\n  \n  let lon1 = clientCoordinates.clientLongitude;\n\n  // loop through the array of saloon objects\n  for (let i = 0; i < arrayOfSaloonObjects.length; i++) {\n    const currentSaloon = arrayOfSaloonObjects[i];\n\n    let lat2 = currentSaloon.latitude;\n    \n    let lon2 = currentSaloon.longitude;\n\n    currentSaloon.distance = getDistance(lat1, lon1, lat2, lon2);\n  };\n};\n\nconst getDistance = (lat1, lon1, lat2, lon2) => {\n  // return a zero if the two sets of coordinates are the same\n  if ((lat1 === lat2) && (lon1 === lon2)) {\n    return 0;\n  }\n  // magic:\n  else {\n    var radlat1 = Math.PI * lat1 / 180;\n    var radlat2 = Math.PI * lat2 / 180;\n    var theta = lon1 - lon2;\n    var radtheta = Math.PI * theta / 180;\n    var dist = Math.sin(radlat1) * Math.sin(radlat2) + Math.cos(radlat1) * Math.cos(radlat2) * Math.cos(radtheta);\n    if (dist > 1) {\n      dist = 1;\n    }\n    dist = Math.acos(dist);\n    dist = dist * 180 / Math.PI;\n    dist = dist * 60 * 1.1515;\n    dist = dist * 1.609344; //km\n    \n    dist = Math.round(dist * 10) / 10\n\n    return dist;\n  };\n};"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/Users/nestos/Desktop/Code/glowspace/src/components/Search/SearchResults/SearchResultsContainer.js\";\n// SearchResultsContainer.s\n// This container component is responsible for\n// processing the raw search results\n\n/* \n\n  WIP:\n\n  Currently:\n  - this component is calling some helper functions from a utils folder,\n  and some other from the bottom of the file\n\n  Expected:\n  - all of the helper componets should be calles from a seperate utisl folder\n\n*/\nimport React from \"react\";\nimport SearchResults from './SearchResults'; // Import Utils\n\nimport { formatDate, addTheTreatmentsOffered } from './Utils/SearchResultsUtils';\n\nconst SearchResultsContainer = props => {\n  let output;\n  let searchResults;\n\n  if (props.rawResults) {\n    // deep copy the object\n    searchResults = JSON.parse(JSON.stringify(props.rawResults)); // add the treatment that each saloon offers,\n    // to each saloon object\n\n    addTheTreatmentsOffered(searchResults); // add a count and next date to each treatment\n\n    addCountAndNextToEachTreatment(searchResults); // shorten the title and description, if they are more than \n    // 100 or 200 chars respectively\n\n    shortenTitleAndDescription(searchResults);\n    output = searchResults;\n  }\n\n  ;\n\n  if (props.clientCoordinates && output) {\n    addDistanceToSaloon(props.clientCoordinates, output);\n  }\n\n  return /*#__PURE__*/React.createElement(SearchResults, {\n    processedSearchResults: output,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 5\n    }\n  });\n};\n\nexport default SearchResultsContainer;\n/* \n\n  HELPER FUNCTIONS\n\n*/\n\nconst addCountAndNextToEachTreatment = array => {\n  let manipulatedArray = array; // Loop through the saloons \n\n  for (let i = 0; i < manipulatedArray.length; i++) {\n    const saloon = manipulatedArray[i]; // Run an inner loop on the saloons treatmentsOffered array\n    // so we basically take the treatments offered list and start another loop\n\n    for (let j = 0; j < saloon.treatmentsOffered.length; j++) {\n      const treatmentOffered = saloon.treatmentsOffered[j]; // give the treatments offered object a new prop that will be\n      // incremented for everytime we find a matching treatment in each timeslot\n\n      treatmentOffered.count = null;\n      treatmentOffered.next = null; // Run another inner loop on the saloons timeslots array\n      // The timeslots array contains an array of timeslot objects\n      // that all have a treatment prop that has an array of \n      // available treatments offered in that timeslot\n\n      for (let k = 0; k < saloon.timeslots.length; k++) {\n        const timeslot = saloon.timeslots[k]; // if the current timeslots treatment array contains the current treatmentOffered\n\n        let isIncluded = timeslot.treatments.some(element => element.name === treatmentOffered.name); // then add one to treatmentOffered.count\n\n        if (isIncluded) {\n          treatmentOffered.count++;\n        }\n\n        ; // add the next available timeslot if not already set\n\n        if (treatmentOffered.next === null) {\n          // here we could call a format date function that takes the date string\n          // and converts it into our desired format: Onsdag d. 15 April kl 10:00\n          //treatmentOffered.next = <FormatDate dateString={timeslot.start} />\n          treatmentOffered.next = formatDate(timeslot.start);\n        }\n      }\n\n      ;\n    }\n\n    ;\n  }\n\n  ;\n};\n\nconst addDistanceToSaloon = (clientCoordinates, arrayOfSaloonObjects) => {\n  let lat1 = clientCoordinates.clientLatitude;\n  let lon1 = clientCoordinates.clientLongitude; // loop through the array of saloon objects\n\n  for (let i = 0; i < arrayOfSaloonObjects.length; i++) {\n    const currentSaloon = arrayOfSaloonObjects[i];\n    let lat2 = currentSaloon.latitude;\n    let lon2 = currentSaloon.longitude;\n    currentSaloon.distance = getDistance(lat1, lon1, lat2, lon2);\n  }\n\n  ;\n};\n\nconst getDistance = (lat1, lon1, lat2, lon2) => {\n  // return a zero if the two sets of coordinates are the same\n  if (lat1 === lat2 && lon1 === lon2) {\n    return 0;\n  } // magic:\n  else {\n      var radlat1 = Math.PI * lat1 / 180;\n      var radlat2 = Math.PI * lat2 / 180;\n      var theta = lon1 - lon2;\n      var radtheta = Math.PI * theta / 180;\n      var dist = Math.sin(radlat1) * Math.sin(radlat2) + Math.cos(radlat1) * Math.cos(radlat2) * Math.cos(radtheta);\n\n      if (dist > 1) {\n        dist = 1;\n      }\n\n      dist = Math.acos(dist);\n      dist = dist * 180 / Math.PI;\n      dist = dist * 60 * 1.1515;\n      dist = dist * 1.609344; //km\n\n      dist = Math.round(dist * 10) / 10;\n      return dist;\n    }\n\n  ;\n};\n\nconst shortenTitleAndDescription = saloonArray => {\n  // Run an outer loop on the saloons\n  for (let i = 0; i < saloonArray.length; i++) {\n    const saloon = saloonArray[i]; // Run an inner loop on the treatments that each saloon offers\n\n    for (let j = 0; j < saloon.treatmentsOffered.length; j++) {\n      const treatment = saloon.treatmentsOffered[j];\n\n      if (treatment.name.length > 100) {\n        treatment.name = shortenString(treatment.name, 100);\n      }\n\n      ;\n\n      if (treatment.description.length > 250) {\n        treatment.description = shortenString(treatment.description, 250);\n      }\n\n      ;\n    }\n\n    ;\n  }\n\n  ;\n};\n\nconst shortenString = (string, desiredLength) => {\n  return string.slice(0, desiredLength) + \"[...]\";\n};","map":{"version":3,"sources":["/Users/nestos/Desktop/Code/glowspace/src/components/Search/SearchResults/SearchResultsContainer.js"],"names":["React","SearchResults","formatDate","addTheTreatmentsOffered","SearchResultsContainer","props","output","searchResults","rawResults","JSON","parse","stringify","addCountAndNextToEachTreatment","shortenTitleAndDescription","clientCoordinates","addDistanceToSaloon","array","manipulatedArray","i","length","saloon","j","treatmentsOffered","treatmentOffered","count","next","k","timeslots","timeslot","isIncluded","treatments","some","element","name","start","arrayOfSaloonObjects","lat1","clientLatitude","lon1","clientLongitude","currentSaloon","lat2","latitude","lon2","longitude","distance","getDistance","radlat1","Math","PI","radlat2","theta","radtheta","dist","sin","cos","acos","round","saloonArray","treatment","shortenString","description","string","desiredLength","slice"],"mappings":"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","sourcesContent":["// SearchResultsContainer.s\n\n// This container component is responsible for\n// processing the raw search results\n\n/* \n\n  WIP:\n\n  Currently:\n  - this component is calling some helper functions from a utils folder,\n  and some other from the bottom of the file\n\n  Expected:\n  - all of the helper componets should be calles from a seperate utisl folder\n\n*/\n\nimport React from \"react\";\n\nimport SearchResults from './SearchResults';\n\n// Import Utils\nimport {formatDate, addTheTreatmentsOffered} from './Utils/SearchResultsUtils';\n\nconst SearchResultsContainer = props => {\n  \n  let output;\n  let searchResults;\n\n  if (props.rawResults) {\n\n    // deep copy the object\n    searchResults = JSON.parse(JSON.stringify(props.rawResults))\n\n    // add the treatment that each saloon offers,\n    // to each saloon object\n    addTheTreatmentsOffered(searchResults)\n\n    // add a count and next date to each treatment\n    addCountAndNextToEachTreatment(searchResults)\n\n    // shorten the title and description, if they are more than \n    // 100 or 200 chars respectively\n    shortenTitleAndDescription(searchResults);\n\n    output = searchResults;\n  };\n\n  if (props.clientCoordinates && output) {\n    addDistanceToSaloon(props.clientCoordinates, output);\n  }\n\n  return(\n    <SearchResults \n      processedSearchResults={output}\n    />\n  );\n};\n\n\nexport default SearchResultsContainer;\n\n\n/* \n\n  HELPER FUNCTIONS\n\n*/\n\n\nconst addCountAndNextToEachTreatment = (array) => {\n  let manipulatedArray = array;\n\n  // Loop through the saloons \n  for (let i = 0; i < manipulatedArray.length; i++) {\n    const saloon = manipulatedArray[i];\n\n    // Run an inner loop on the saloons treatmentsOffered array\n    // so we basically take the treatments offered list and start another loop\n    for (let j = 0; j < saloon.treatmentsOffered.length; j++) {\n      const treatmentOffered = saloon.treatmentsOffered[j];\n      // give the treatments offered object a new prop that will be\n      // incremented for everytime we find a matching treatment in each timeslot\n      treatmentOffered.count = null\n      treatmentOffered.next = null\n\n      // Run another inner loop on the saloons timeslots array\n      // The timeslots array contains an array of timeslot objects\n      // that all have a treatment prop that has an array of \n      // available treatments offered in that timeslot\n      for (let k = 0; k < saloon.timeslots.length; k++) {\n        const timeslot = saloon.timeslots[k];\n\n        // if the current timeslots treatment array contains the current treatmentOffered\n        let isIncluded = timeslot.treatments.some( element => element.name === treatmentOffered.name);\n  \n        // then add one to treatmentOffered.count\n        if (isIncluded) {\n          treatmentOffered.count++;\n        };\n\n        // add the next available timeslot if not already set\n        if (treatmentOffered.next === null) {\n          // here we could call a format date function that takes the date string\n          // and converts it into our desired format: Onsdag d. 15 April kl 10:00\n          //treatmentOffered.next = <FormatDate dateString={timeslot.start} />\n          treatmentOffered.next = formatDate(timeslot.start);\n        }\n      };\n    };\n  };\n};\n\nconst addDistanceToSaloon = (clientCoordinates, arrayOfSaloonObjects) => {\n\n  let lat1 = clientCoordinates.clientLatitude;\n  \n  let lon1 = clientCoordinates.clientLongitude;\n\n  // loop through the array of saloon objects\n  for (let i = 0; i < arrayOfSaloonObjects.length; i++) {\n    const currentSaloon = arrayOfSaloonObjects[i];\n\n    let lat2 = currentSaloon.latitude;\n    \n    let lon2 = currentSaloon.longitude;\n\n    currentSaloon.distance = getDistance(lat1, lon1, lat2, lon2);\n  };\n};\n\nconst getDistance = (lat1, lon1, lat2, lon2) => {\n  // return a zero if the two sets of coordinates are the same\n  if ((lat1 === lat2) && (lon1 === lon2)) {\n    return 0;\n  }\n  // magic:\n  else {\n    var radlat1 = Math.PI * lat1 / 180;\n    var radlat2 = Math.PI * lat2 / 180;\n    var theta = lon1 - lon2;\n    var radtheta = Math.PI * theta / 180;\n    var dist = Math.sin(radlat1) * Math.sin(radlat2) + Math.cos(radlat1) * Math.cos(radlat2) * Math.cos(radtheta);\n    if (dist > 1) {\n      dist = 1;\n    }\n    dist = Math.acos(dist);\n    dist = dist * 180 / Math.PI;\n    dist = dist * 60 * 1.1515;\n    dist = dist * 1.609344; //km\n    \n    dist = Math.round(dist * 10) / 10\n\n    return dist;\n  };\n};\n\nconst shortenTitleAndDescription = saloonArray => {\n  // Run an outer loop on the saloons\n  for (let i = 0; i < saloonArray.length; i++) {\n    const saloon = saloonArray[i];\n\n    // Run an inner loop on the treatments that each saloon offers\n    for (let j = 0; j < saloon.treatmentsOffered.length; j++) {\n      const treatment = saloon.treatmentsOffered[j];\n      \n      if (treatment.name.length > 100) {\n        treatment.name = shortenString(treatment.name, 100);\n      };\n\n      if (treatment.description.length > 250) {\n        treatment.description = shortenString(treatment.description, 250);\n      };\n    }; \n  };\n};\n\nconst shortenString = (string, desiredLength) => {\n  return string.slice(0, desiredLength) + \"[...]\";  \n};\n"]},"metadata":{},"sourceType":"module"}
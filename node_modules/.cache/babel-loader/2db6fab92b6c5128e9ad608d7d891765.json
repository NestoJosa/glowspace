{"ast":null,"code":"var _jsxFileName = \"/Users/nestos/Desktop/Code/glowspace/src/components/Search/SearchContainer.js\";\nimport React from 'react';\nimport GetSearchString from './SearchForm/GetSearchString/GetSearchString';\nimport Search from './Search';\n\nclass SearchContainer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      searchResults: null,\n      lat: null,\n      lon: null\n    };\n    this.getSearchResults = this.getSearchResults.bind(this);\n  }\n\n  componentDidMount() {\n    if (navigator.geolocation) {\n      // the arrow-success-func is a required func for the \n      // getCurrentPosition method and takes a position object only\n      navigator.geolocation.getCurrentPosition(position => {\n        this.setState({\n          lat: position.coords.latitude,\n          lon: position.coords.longitude\n        });\n      });\n    }\n\n    ;\n  }\n\n  // WIP: so why is it now working? searchParams undefined?\n  getSearchResults(searchParams) {\n    console.log('getSearchResults triggered!');\n    console.log('searchParams:');\n    console.log(searchParams); // get a formatted string for the api from the passed search params\n\n    /*     let stringForApi = GetSearchString(searchParams);\n    \n        fetch(stringForApi)\n          .then(res => res.json())\n          .then((data) => {\n            this.setState({ searchResults: data });\n          })\n          // Log any errors to the console\n          .catch(console.log); */\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(Search, {\n      getSearchResults: this.getSearchResults,\n      unProcessedData: this.state.searchResults,\n      clientCoordinates: {\n        'clientLatitude': this.state.lat,\n        'clientLongitude': this.state.lon\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 7\n      }\n    });\n  }\n\n}\n\n;\nexport default SearchContainer;","map":{"version":3,"sources":["/Users/nestos/Desktop/Code/glowspace/src/components/Search/SearchContainer.js"],"names":["React","GetSearchString","Search","SearchContainer","Component","constructor","props","state","searchResults","lat","lon","getSearchResults","bind","componentDidMount","navigator","geolocation","getCurrentPosition","position","setState","coords","latitude","longitude","searchParams","console","log","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,eAAP,MAA4B,8CAA5B;AACA,OAAOC,MAAP,MAAmB,UAAnB;;AAEA,MAAMC,eAAN,SAA8BH,KAAK,CAACI,SAApC,CAA8C;AAC5CC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,aAAa,EAAE,IADJ;AAEXC,MAAAA,GAAG,EAAE,IAFM;AAGXC,MAAAA,GAAG,EAAE;AAHM,KAAb;AAKA,SAAKC,gBAAL,GAAwB,KAAKA,gBAAL,CAAsBC,IAAtB,CAA2B,IAA3B,CAAxB;AACD;;AAEDC,EAAAA,iBAAiB,GAAG;AAClB,QAAIC,SAAS,CAACC,WAAd,EAA2B;AACzB;AACA;AACAD,MAAAA,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CAA2CC,QAAD,IAAc;AACtD,aAAKC,QAAL,CAAc;AACZT,UAAAA,GAAG,EAAEQ,QAAQ,CAACE,MAAT,CAAgBC,QADT;AAEZV,UAAAA,GAAG,EAAEO,QAAQ,CAACE,MAAT,CAAgBE;AAFT,SAAd;AAID,OALD;AAMD;;AAAA;AACF;;AAED;AACAV,EAAAA,gBAAgB,CAACW,YAAD,EAAe;AAC7BC,IAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYF,YAAZ,EAH6B,CAI7B;;AACJ;;;;;;;;;AASG;;AAEDG,EAAAA,MAAM,GAAG;AACP,wBACE,oBAAC,MAAD;AACE,MAAA,gBAAgB,EAAE,KAAKd,gBADzB;AAEE,MAAA,eAAe,EAAE,KAAKJ,KAAL,CAAWC,aAF9B;AAGE,MAAA,iBAAiB,EAAE;AACjB,0BAAkB,KAAKD,KAAL,CAAWE,GADZ;AAEjB,2BAAmB,KAAKF,KAAL,CAAWG;AAFb,OAHrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAUD;;AApD2C;;AAqD7C;AAED,eAAeP,eAAf","sourcesContent":["import React from 'react';\nimport GetSearchString from './SearchForm/GetSearchString/GetSearchString';\nimport Search from './Search';\n\nclass SearchContainer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      searchResults: null,\n      lat: null,\n      lon: null,\n    };\n    this.getSearchResults = this.getSearchResults.bind(this);\n  };\n\n  componentDidMount() {\n    if (navigator.geolocation) {\n      // the arrow-success-func is a required func for the \n      // getCurrentPosition method and takes a position object only\n      navigator.geolocation.getCurrentPosition( (position) => {\n        this.setState({\n          lat: position.coords.latitude,\n          lon: position.coords.longitude\n        });\n      });\n    };\n  };\n\n  // WIP: so why is it now working? searchParams undefined?\n  getSearchResults(searchParams) {\n    console.log('getSearchResults triggered!')\n    console.log('searchParams:')\n    console.log(searchParams)\n    // get a formatted string for the api from the passed search params\n/*     let stringForApi = GetSearchString(searchParams);\n\n    fetch(stringForApi)\n      .then(res => res.json())\n      .then((data) => {\n        this.setState({ searchResults: data });\n      })\n      // Log any errors to the console\n      .catch(console.log); */\n  };\n\n  render() {\n    return(\n      <Search \n        getSearchResults={this.getSearchResults}\n        unProcessedData={this.state.searchResults}\n        clientCoordinates={{ \n          'clientLatitude': this.state.lat,  \n          'clientLongitude': this.state.lon,  \n        }}\n      />\n    );\n  };\n};\n\nexport default SearchContainer;\n"]},"metadata":{},"sourceType":"module"}
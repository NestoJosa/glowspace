{"ast":null,"code":"// takes the chosen search parameters and returns a search string for the api:\n// e.g. \"https://glowspace.dk/api/findtimeslot?type=1,4&startdate=2020-04-30&enddate=2020-04-30&text\";\nvar GetSearchString=function GetSearchString(searchParams){// create a string of numbers that represent\n// the chosen treatment types \nvar stringOfChosenTreatments=[searchParams['Hår']===true?1:null,searchParams['Krop']===true?2:null,searchParams['Fødder']===true?3:null,searchParams['Hænder']===true?4:null,searchParams['Ansigt']===true?5:null].filter(function(el){return el!==null;}).toString();// if all, or no treatments are chosen, convert the string to a 0,\n// which represents the choosing of all treatments\nif(stringOfChosenTreatments==='1,2,3,4,5'||stringOfChosenTreatments===''){stringOfChosenTreatments='0';};var fromDate;var toDate;// if no from or to date has been chosen\n// set them both to todays date\nif(searchParams.from===null&&searchParams.to===null){fromDate=getTodaysDateAsAString();toDate=getTodaysDateAsAString();}// if a from date has been chosen but not a to date,\n// set the to date to whatever was chosen,\n// and the do the same with the from date\n// because we assume that user wants results for that day \nelse if(searchParams.from!==null&&searchParams.to===null){fromDate=searchParams.from.year.toString()+'-'+addAZeroBeforeNrStrIfSingleDigit(searchParams.from.month.toString())+'-'+addAZeroBeforeNrStrIfSingleDigit(searchParams.from.day.toString());toDate=fromDate;// if they are both chosen, to set them to whatever was chosen \n}else if(searchParams.from!==null&&searchParams.to!==null){fromDate=searchParams.from.year.toString()+'-'+addAZeroBeforeNrStrIfSingleDigit(searchParams.from.month.toString())+'-'+addAZeroBeforeNrStrIfSingleDigit(searchParams.from.day.toString());toDate=searchParams.to.year.toString()+'-'+addAZeroBeforeNrStrIfSingleDigit(searchParams.to.month.toString())+'-'+addAZeroBeforeNrStrIfSingleDigit(searchParams.to.day.toString());}else{console.log('something went wrong, cause you should not see this, more specifically there should not be a scenario where this is triggered...');};// create the complete string for the api, working example:\n// https://glowspace.dk/api/findtimeslot?type=0&startdate=2020-04-30&enddate=2020-04-30&text\nvar stringForApi=\"https://glowspace.dk/api/findtimeslot?\"+\"type=\"+stringOfChosenTreatments+\"&startdate=\"+fromDate+\"&enddate=\"+toDate+\"&text\";return stringForApi;};export default GetSearchString;/* \n\n  Helpers\n\n*/var addAZeroBeforeNrStrIfSingleDigit=function addAZeroBeforeNrStrIfSingleDigit(nr){if(typeof nr!=='string'){return console.log('you must pass a string into this function');}else if(nr.length===1){nr='0'+nr;return nr;}else{return nr;};};var getTodaysDateAsAString=function getTodaysDateAsAString(){// the string will be in the following format: YYYY-MM-DD\nvar todaysDate=new Date();var yearStr=todaysDate.getFullYear().toString();// note: \"+ 1\" because the month is zero indexed\nvar month=todaysDate.getMonth()+1;var monthStr=addAZeroBeforeNrStrIfSingleDigit(month.toString());var dayStr=addAZeroBeforeNrStrIfSingleDigit(todaysDate.getDate().toString());var dateString=yearStr+'-'+monthStr+'-'+dayStr;return dateString;};","map":{"version":3,"sources":["/Users/nestos/Desktop/Code/glowspace/src/components/Search/GetSearchString/GetSearchString.js"],"names":["GetSearchString","searchParams","stringOfChosenTreatments","filter","el","toString","fromDate","toDate","from","to","getTodaysDateAsAString","year","addAZeroBeforeNrStrIfSingleDigit","month","day","console","log","stringForApi","nr","length","todaysDate","Date","yearStr","getFullYear","getMonth","monthStr","dayStr","getDate","dateString"],"mappings":"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","sourcesContent":["\n// takes the chosen search parameters and returns a search string for the api:\n// e.g. \"https://glowspace.dk/api/findtimeslot?type=1,4&startdate=2020-04-30&enddate=2020-04-30&text\";\n\n\nconst GetSearchString = searchParams => {\n  // create a string of numbers that represent\n  // the chosen treatment types \n  let stringOfChosenTreatments = [\n    searchParams['Hår'] === true ? 1 : null,\n    searchParams['Krop'] === true ? 2 : null,\n    searchParams['Fødder'] === true ? 3 : null,\n    searchParams['Hænder'] === true ? 4 : null,\n    searchParams['Ansigt'] === true ? 5 : null,\n    ]\n    .filter( el => el !== null ).toString();\n\n  // if all, or no treatments are chosen, convert the string to a 0,\n  // which represents the choosing of all treatments\n  if ( stringOfChosenTreatments === '1,2,3,4,5' || stringOfChosenTreatments === '') {\n    stringOfChosenTreatments = '0';\n  };\n\n  let fromDate;\n  let toDate;\n\n  // if no from or to date has been chosen\n  // set them both to todays date\n  if (searchParams.from === null && searchParams.to === null) {\n    fromDate = getTodaysDateAsAString();\n    toDate = getTodaysDateAsAString();\n  } // if a from date has been chosen but not a to date,\n    // set the to date to whatever was chosen,\n    // and the do the same with the from date\n    // because we assume that user wants results for that day \n    else if (searchParams.from !== null && searchParams.to === null) {\n      fromDate = \n      searchParams.from.year.toString() + '-' +\n      addAZeroBeforeNrStrIfSingleDigit(searchParams.from.month.toString()) + '-' +\n      addAZeroBeforeNrStrIfSingleDigit(searchParams.from.day.toString());\n      toDate = fromDate;\n\n    // if they are both chosen, to set them to whatever was chosen \n  } else if (searchParams.from !== null && searchParams.to !== null) {\n      fromDate = \n      searchParams.from.year.toString() + '-' +\n      addAZeroBeforeNrStrIfSingleDigit(searchParams.from.month.toString()) + '-' +\n      addAZeroBeforeNrStrIfSingleDigit(searchParams.from.day.toString());\n      toDate = \n      searchParams.to.year.toString() + '-' +\n      addAZeroBeforeNrStrIfSingleDigit(searchParams.to.month.toString()) + '-' +\n      addAZeroBeforeNrStrIfSingleDigit(searchParams.to.day.toString());\n  } else {\n      console.log('something went wrong, cause you should not see this, more specifically there should not be a scenario where this is triggered...');\n  };\n\n  // create the complete string for the api, working example:\n  // https://glowspace.dk/api/findtimeslot?type=0&startdate=2020-04-30&enddate=2020-04-30&text\n  const stringForApi = \n        \"https://glowspace.dk/api/findtimeslot?\" +\n        \"type=\" + stringOfChosenTreatments +\n        \"&startdate=\" + fromDate +\n        \"&enddate=\" + toDate + \n        \"&text\";\n\n  return stringForApi\n};\n\nexport default GetSearchString;\n\n/* \n\n  Helpers\n\n*/\n\nconst addAZeroBeforeNrStrIfSingleDigit = nr => {\n  if (typeof nr !== 'string') {\n    return console.log('you must pass a string into this function');\n  } else if (nr.length === 1) {\n    nr = '0' + nr;\n    return nr;\n  } else {\n    return nr;\n  };\n};\n\nconst getTodaysDateAsAString = () => {\n  // the string will be in the following format: YYYY-MM-DD\n  const todaysDate = new Date();\n  const yearStr = todaysDate.getFullYear().toString();\n\n  // note: \"+ 1\" because the month is zero indexed\n  const month = todaysDate.getMonth() + 1;\n  const monthStr = addAZeroBeforeNrStrIfSingleDigit(month.toString());\n\n  const dayStr = addAZeroBeforeNrStrIfSingleDigit(todaysDate.getDate().toString());\n\n  const dateString = yearStr + '-' + monthStr + '-' + dayStr;\n  return dateString;\n};"]},"metadata":{},"sourceType":"module"}
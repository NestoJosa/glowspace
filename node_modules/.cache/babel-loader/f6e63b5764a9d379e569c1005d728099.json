{"ast":null,"code":"// takes the chosen search parameters \n// and returns a search string for the api:\n// e.g. \"https://glowspace.dk/api/findtimeslot?type=1,4&startdate=2020-04-30&enddate=2020-04-30&text\";\nconst GetSearchString = searchParams => {\n  lo;\n  console.log('searchParams.from:');\n  console.log(searchParams.from); // => undefined! hah! :D\n  // create a string of numbers that represent\n  // the chosen treatment types \n\n  let stringOfChosenTreatments = [searchParams['Hår'] === true ? 1 : null, searchParams['Krop'] === true ? 2 : null, searchParams['Fødder'] === true ? 3 : null, searchParams['Hænder'] === true ? 4 : null, searchParams['Ansigt'] === true ? 5 : null].filter(el => el !== null).toString(); // if all, or no treatments are chosen, convert the string to a 0,\n  // which represents the choosing of all treatments\n\n  if (stringOfChosenTreatments === '1,2,3,4,5' || stringOfChosenTreatments === '') {\n    stringOfChosenTreatments = '0';\n  }\n\n  ;\n  let fromDate;\n  let toDate; // if no from or to date has been chosen\n  // set them both to todays date\n\n  if (searchParams.from === null && searchParams.to === null) {\n    fromDate = getTodaysDateAsAString();\n    toDate = getTodaysDateAsAString();\n  } // if a from date has been chosen but not a to date,\n  // set the to date to whatever was chosen,\n  // and the do the same with the from date\n  // because we assume that user wants results for that day \n  else if (searchParams.from !== null && searchParams.to === null) {\n      fromDate = searchParams.from.year.toString() + '-' + addAZeroBeforeNrStrIfSingleDigit(searchParams.from.month.toString()) + '-' + addAZeroBeforeNrStrIfSingleDigit(searchParams.from.day.toString());\n      toDate = fromDate; // if they are both chosen, to set them to whatever was chosen \n    } else if (searchParams.from !== null && searchParams.to !== null) {\n      fromDate = searchParams.from.year.toString() + '-' + addAZeroBeforeNrStrIfSingleDigit(searchParams.from.month.toString()) + '-' + addAZeroBeforeNrStrIfSingleDigit(searchParams.from.day.toString());\n      toDate = searchParams.to.year.toString() + '-' + addAZeroBeforeNrStrIfSingleDigit(searchParams.to.month.toString()) + '-' + addAZeroBeforeNrStrIfSingleDigit(searchParams.to.day.toString());\n    } else {\n      console.log('something went wrong, cause you should not see this, more specifically there should not be a scenario where this is triggered...');\n    }\n\n  ; // create the complete string for the api, working example:\n  // https://glowspace.dk/api/findtimeslot?type=0&startdate=2020-04-30&enddate=2020-04-30&text\n\n  const stringForApi = \"https://glowspace.dk/api/findtimeslot?\" + \"type=\" + stringOfChosenTreatments + \"&startdate=\" + fromDate + \"&enddate=\" + toDate + \"&text\";\n  return stringForApi;\n};\n\nexport default GetSearchString;\n/* \n\n  Helpers\n\n*/\n\nconst addAZeroBeforeNrStrIfSingleDigit = nr => {\n  if (typeof nr !== 'string') {\n    return console.log('you must pass a string into this function');\n  } else if (nr.length === 1) {\n    nr = '0' + nr;\n    return nr;\n  } else {\n    return nr;\n  }\n\n  ;\n};\n\nconst getTodaysDateAsAString = () => {\n  // the string will be in the following format: YYYY-MM-DD\n  const todaysDate = new Date();\n  const yearStr = todaysDate.getFullYear().toString(); // note: \"+ 1\" because the month is zero indexed\n\n  const month = todaysDate.getMonth() + 1;\n  const monthStr = addAZeroBeforeNrStrIfSingleDigit(month.toString());\n  const dayStr = addAZeroBeforeNrStrIfSingleDigit(todaysDate.getDate().toString());\n  const dateString = yearStr + '-' + monthStr + '-' + dayStr;\n  return dateString;\n};","map":{"version":3,"sources":["/Users/nestos/Desktop/Code/glowspace/src/components/Search/SearchForm/GetSearchString/GetSearchString.js"],"names":["GetSearchString","searchParams","lo","console","log","from","stringOfChosenTreatments","filter","el","toString","fromDate","toDate","to","getTodaysDateAsAString","year","addAZeroBeforeNrStrIfSingleDigit","month","day","stringForApi","nr","length","todaysDate","Date","yearStr","getFullYear","getMonth","monthStr","dayStr","getDate","dateString"],"mappings":"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","sourcesContent":["\n// takes the chosen search parameters \n// and returns a search string for the api:\n// e.g. \"https://glowspace.dk/api/findtimeslot?type=1,4&startdate=2020-04-30&enddate=2020-04-30&text\";\n\n\nconst GetSearchString = searchParams => {\n  lo\n  console.log('searchParams.from:')\n  console.log(searchParams.from) // => undefined! hah! :D\n\n  // create a string of numbers that represent\n  // the chosen treatment types \n  let stringOfChosenTreatments = [\n    searchParams['Hår'] === true ? 1 : null,\n    searchParams['Krop'] === true ? 2 : null,\n    searchParams['Fødder'] === true ? 3 : null,\n    searchParams['Hænder'] === true ? 4 : null,\n    searchParams['Ansigt'] === true ? 5 : null,\n    ]\n    .filter( el => el !== null ).toString();\n\n  // if all, or no treatments are chosen, convert the string to a 0,\n  // which represents the choosing of all treatments\n  if ( stringOfChosenTreatments === '1,2,3,4,5' || stringOfChosenTreatments === '') {\n    stringOfChosenTreatments = '0';\n  };\n\n  let fromDate;\n  let toDate;\n\n  // if no from or to date has been chosen\n  // set them both to todays date\n  if (searchParams.from === null && searchParams.to === null) {\n    fromDate = getTodaysDateAsAString();\n    toDate = getTodaysDateAsAString();\n  } // if a from date has been chosen but not a to date,\n    // set the to date to whatever was chosen,\n    // and the do the same with the from date\n    // because we assume that user wants results for that day \n    else if (searchParams.from !== null && searchParams.to === null) {\n      fromDate = \n      searchParams.from.year.toString() + '-' +\n      addAZeroBeforeNrStrIfSingleDigit(searchParams.from.month.toString()) + '-' +\n      addAZeroBeforeNrStrIfSingleDigit(searchParams.from.day.toString());\n      toDate = fromDate;\n\n    // if they are both chosen, to set them to whatever was chosen \n  } else if (searchParams.from !== null && searchParams.to !== null) {\n      fromDate = \n      searchParams.from.year.toString() + '-' +\n      addAZeroBeforeNrStrIfSingleDigit(searchParams.from.month.toString()) + '-' +\n      addAZeroBeforeNrStrIfSingleDigit(searchParams.from.day.toString());\n      toDate = \n      searchParams.to.year.toString() + '-' +\n      addAZeroBeforeNrStrIfSingleDigit(searchParams.to.month.toString()) + '-' +\n      addAZeroBeforeNrStrIfSingleDigit(searchParams.to.day.toString());\n  } else {\n      console.log('something went wrong, cause you should not see this, more specifically there should not be a scenario where this is triggered...');\n  };\n\n  // create the complete string for the api, working example:\n  // https://glowspace.dk/api/findtimeslot?type=0&startdate=2020-04-30&enddate=2020-04-30&text\n  const stringForApi = \n        \"https://glowspace.dk/api/findtimeslot?\" +\n        \"type=\" + stringOfChosenTreatments +\n        \"&startdate=\" + fromDate +\n        \"&enddate=\" + toDate + \n        \"&text\";\n\n  return stringForApi\n};\n\nexport default GetSearchString;\n\n/* \n\n  Helpers\n\n*/\n\nconst addAZeroBeforeNrStrIfSingleDigit = nr => {\n  if (typeof nr !== 'string') {\n    return console.log('you must pass a string into this function');\n  } else if (nr.length === 1) {\n    nr = '0' + nr;\n    return nr;\n  } else {\n    return nr;\n  };\n};\n\nconst getTodaysDateAsAString = () => {\n  // the string will be in the following format: YYYY-MM-DD\n  const todaysDate = new Date();\n  const yearStr = todaysDate.getFullYear().toString();\n\n  // note: \"+ 1\" because the month is zero indexed\n  const month = todaysDate.getMonth() + 1;\n  const monthStr = addAZeroBeforeNrStrIfSingleDigit(month.toString());\n\n  const dayStr = addAZeroBeforeNrStrIfSingleDigit(todaysDate.getDate().toString());\n\n  const dateString = yearStr + '-' + monthStr + '-' + dayStr;\n  return dateString;\n};"]},"metadata":{},"sourceType":"module"}
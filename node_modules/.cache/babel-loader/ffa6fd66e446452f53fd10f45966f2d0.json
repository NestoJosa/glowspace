{"ast":null,"code":"import _defineProperty from\"/Users/nestos/Desktop/Code/glowspace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _classCallCheck from\"/Users/nestos/Desktop/Code/glowspace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/nestos/Desktop/Code/glowspace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _assertThisInitialized from\"/Users/nestos/Desktop/Code/glowspace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";import _inherits from\"/Users/nestos/Desktop/Code/glowspace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/Users/nestos/Desktop/Code/glowspace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import React from'react';import TreatmentButtonsList from'./TreatmentButtonsList/TreatmentButtonsList';import Dropdown from'./Dropdown/Dropdown';import CalendarDropdown from'./CalendarDropdown/CalendarDropdown';import SubmitButton from'./SubmitButton/SubmitButton';import'./StartSearch.css';var StartSearch=/*#__PURE__*/function(_React$Component){_inherits(StartSearch,_React$Component);var _super=_createSuper(StartSearch);function StartSearch(props){var _this$state;var _this;_classCallCheck(this,StartSearch);_this=_super.call(this,props);// make a shortcut for this.props\nvar p=_this.props;// create an array for storing the labels (mostly for conveniance)\n// these vals will not change in the components lifecycle\n_this.labels=[p.defValLabels[0],p.defValLabels[1],p.defValLabels[2],p.defValLabels[3],p.defValLabels[4]];// set the initial state using the passed default values\n// for the labels and the checkboxes\n// each prop should output => <labelName>: <boolean>\n_this.state=(_this$state={},_defineProperty(_this$state,_this.labels[0],p.defValIsChecked[0]),_defineProperty(_this$state,_this.labels[1],p.defValIsChecked[1]),_defineProperty(_this$state,_this.labels[2],p.defValIsChecked[2]),_defineProperty(_this$state,_this.labels[3],p.defValIsChecked[3]),_defineProperty(_this$state,_this.labels[4],p.defValIsChecked[4]),_defineProperty(_this$state,\"from\",null),_defineProperty(_this$state,\"to\",null),_this$state);// binders\n_this.handleClick=_this.handleClick.bind(_assertThisInitialized(_this));_this.handleDateClick=_this.handleDateClick.bind(_assertThisInitialized(_this));_this.handleSubmitClick=_this.handleSubmitClick.bind(_assertThisInitialized(_this));return _this;}_createClass(StartSearch,[{key:\"handleClick\",// this handler is triggered, both when you click on a treatment-icons\n// and also when you click on a treatment-checkbox\nvalue:function handleClick(clickedTreatment){this.setState(_defineProperty({},clickedTreatment,!this.state[clickedTreatment]));}},{key:\"handleDateClick\",value:function handleDateClick(e){this.setState({from:e.from,to:e.to});}},{key:\"handleSubmitClick\",value:function handleSubmitClick(){this.props.getSearchResults(this.state);}},{key:\"render\",value:function render(){// #refactor!\n// get the boolean values from the this.state object\n// that will be passed to the children components\n// and slice to remove the from and date values (this is not the most ideal solution\n// because the slice will run everytime the render function runs, it would be better \n// to handle this in the constructor, by setting two object in the state - one for \n// the treatment and labels, and another for the dates )\nvar checkedUncheckedValuesArrray=Object.values(this.state).slice(0,5);// get an array contain only the selected formatted labels\n// that will be passed to the Dropwdown component\n// and used by the component to output the chosen treatment(s)\nvar chosenLabels=formatSelectedLabels(getSelectedLabels(this.state));return/*#__PURE__*/React.createElement(\"div\",{className:\"StartSearch-wrapper\"},/*#__PURE__*/React.createElement(TreatmentButtonsList,{labels:this.labels,isChecked:checkedUncheckedValuesArrray,onClick:this.handleClick,icons:this.props.icons}),/*#__PURE__*/React.createElement(Dropdown,{labels:this.labels,chosenLabels:chosenLabels,isChecked:checkedUncheckedValuesArrray,onClick:this.handleClick}),/*#__PURE__*/React.createElement(CalendarDropdown,{from:this.state.from,to:this.state.to,handleDateClick:this.handleDateClick}),/*#__PURE__*/React.createElement(SubmitButton,{handleClick:this.handleSubmitClick}));}}]);return StartSearch;}(React.Component);;export default StartSearch;/* \n\n  Helper Functions\n\n*/ // takes the state object and returns an array,\n// that contains the chosen treatments - \n// treatments with a value of true\nvar getSelectedLabels=function getSelectedLabels(obj){// get an array of the components state key/value pars,\n// this will result in an array of nested arrays\n// and remove the 'from' and 'to' from the array\nvar objectsKeyValPairsArr=Object.entries(obj).slice(0,5);// initiate an empty array that will store the selected labels only\nvar selectedLabelsArray=[];// loop through the objectsKeyValPairsArr (its an array of arrays)\nobjectsKeyValPairsArr.forEach(function(currentElement,i){// in the current element ([<label>],[<isChecked>]),\n// if isChecked is true   \nif(currentElement[1]){// then push the label to the selectedLabelsArray\nselectedLabelsArray.push(currentElement[0]);};});return selectedLabelsArray;};// helper function, formatSelectedLabels,\n// takes an array contain the selected labels\n// and returns a new array with the formatted labels\n// for the dropdown component\nvar formatSelectedLabels=function formatSelectedLabels(arr){// create a new array where each element has a space before the string,\n// if not used, the result is: <label>,<label>,<label>\nvar formattedLabels=arr.map(function(element){return\" \"+element;});return formattedLabels;};","map":{"version":3,"sources":["/Users/nestos/Desktop/Code/glowspace/src/components/Search/StartSearch/StartSearch.js"],"names":["React","TreatmentButtonsList","Dropdown","CalendarDropdown","SubmitButton","StartSearch","props","p","labels","defValLabels","state","defValIsChecked","handleClick","bind","handleDateClick","handleSubmitClick","clickedTreatment","setState","e","from","to","getSearchResults","checkedUncheckedValuesArrray","Object","values","slice","chosenLabels","formatSelectedLabels","getSelectedLabels","icons","Component","obj","objectsKeyValPairsArr","entries","selectedLabelsArray","forEach","currentElement","i","push","arr","formattedLabels","map","element"],"mappings":"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","sourcesContent":["import React from 'react';\nimport TreatmentButtonsList from './TreatmentButtonsList/TreatmentButtonsList';\nimport Dropdown from './Dropdown/Dropdown';\nimport CalendarDropdown from './CalendarDropdown/CalendarDropdown';\nimport SubmitButton from './SubmitButton/SubmitButton';\nimport './StartSearch.css'\n\nclass StartSearch extends React.Component {\n  constructor(props) {\n    super(props);\n\n    // make a shortcut for this.props\n    const p = this.props;\n\n    // create an array for storing the labels (mostly for conveniance)\n    // these vals will not change in the components lifecycle\n    this.labels = [\n      p.defValLabels[0],\n      p.defValLabels[1],\n      p.defValLabels[2],\n      p.defValLabels[3],\n      p.defValLabels[4],  \n    ]\n\n    // set the initial state using the passed default values\n    // for the labels and the checkboxes\n    // each prop should output => <labelName>: <boolean>\n    this.state = {\n      [this.labels[0]]: p.defValIsChecked[0], \n      [this.labels[1]]: p.defValIsChecked[1],\n      [this.labels[2]]: p.defValIsChecked[2],\n      [this.labels[3]]: p.defValIsChecked[3],\n      [this.labels[4]]: p.defValIsChecked[4],\n\n      // set the values for the from and to dates\n      from: null,\n      to: null, \n    };\n\n    // binders\n    this.handleClick = this.handleClick.bind(this);\n    this.handleDateClick = this.handleDateClick.bind(this);\n    this.handleSubmitClick = this.handleSubmitClick.bind(this);\n  };\n\n  // this handler is triggered, both when you click on a treatment-icons\n  // and also when you click on a treatment-checkbox\n  handleClick(clickedTreatment) {\n    this.setState({ [clickedTreatment]: !this.state[clickedTreatment] });\n  }\n\n  handleDateClick(e) {\n    this.setState({\n      from: e.from,\n      to: e.to\n    });\n  }\n\n  handleSubmitClick() {\n    this.props.getSearchResults(this.state); \n  }\n\n  render() {\n    \n    // #refactor!\n    // get the boolean values from the this.state object\n    // that will be passed to the children components\n    // and slice to remove the from and date values (this is not the most ideal solution\n    // because the slice will run everytime the render function runs, it would be better \n    // to handle this in the constructor, by setting two object in the state - one for \n    // the treatment and labels, and another for the dates )\n    let checkedUncheckedValuesArrray = Object.values(this.state).slice(0,5)\n\n    // get an array contain only the selected formatted labels\n    // that will be passed to the Dropwdown component\n    // and used by the component to output the chosen treatment(s)\n    let chosenLabels = formatSelectedLabels(getSelectedLabels(this.state));\n\n    return(\n      <div className=\"StartSearch-wrapper\">\n\n        {/* Render a TreatmentButtonsList and pass it some props */}\n        <TreatmentButtonsList\n          labels={this.labels}\n          isChecked={checkedUncheckedValuesArrray}\n          onClick={this.handleClick}\n          icons={this.props.icons}\n        />\n\n        {/* Render a Dropdown and pass it some props */}\n        <Dropdown \n          labels={this.labels}\n          chosenLabels={chosenLabels}\n          isChecked={checkedUncheckedValuesArrray}\n          onClick={this.handleClick}\n        />\n\n        {/* Render the CalendarDropdown component that contains a SingleDatePicker */}\n        <CalendarDropdown \n          from={this.state.from}\n          to={this.state.to}\n          handleDateClick={this.handleDateClick}\n        />\n\n        {/* Submit Button */}\n        <SubmitButton \n          handleClick={this.handleSubmitClick}\n        />\n      </div>\n    );\n  };\n};\n\nexport default StartSearch;\n\n\n\n\n\n\n/* \n\n  Helper Functions\n\n*/\n\n// takes the state object and returns an array,\n// that contains the chosen treatments - \n// treatments with a value of true\nconst getSelectedLabels = obj => {\n\n\n  // get an array of the components state key/value pars,\n  // this will result in an array of nested arrays\n  // and remove the 'from' and 'to' from the array\n  let objectsKeyValPairsArr = Object.entries(obj).slice(0,5)\n\n  // initiate an empty array that will store the selected labels only\n  const selectedLabelsArray = [];\n\n  // loop through the objectsKeyValPairsArr (its an array of arrays)\n  objectsKeyValPairsArr.forEach( (currentElement, i) => {\n    // in the current element ([<label>],[<isChecked>]),\n    // if isChecked is true   \n    if(currentElement[1]) {\n      // then push the label to the selectedLabelsArray\n      selectedLabelsArray.push(currentElement[0])\n    };\n  });\n\n  return selectedLabelsArray;\n};\n\n// helper function, formatSelectedLabels,\n// takes an array contain the selected labels\n// and returns a new array with the formatted labels\n// for the dropdown component\nconst formatSelectedLabels = arr => {\n  // create a new array where each element has a space before the string,\n  // if not used, the result is: <label>,<label>,<label>\n  let formattedLabels = arr.map( element => \" \" + element);\n\n  return formattedLabels;\n};\n\n"]},"metadata":{},"sourceType":"module"}
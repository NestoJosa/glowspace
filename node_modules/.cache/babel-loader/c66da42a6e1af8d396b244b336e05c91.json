{"ast":null,"code":"var _jsxFileName = \"/Users/nestos/Desktop/Code/glowspace/src/components/Search/SearchForm/SearchFormContainer.js\";\n// SearchFormContainer.js\nimport React, { Component } from \"react\";\nimport SearchForm from './SearchForm'; // Import the icons\n\nimport iconHair from \"../../../assets/icons/hair.svg\";\nimport iconFace from \"../../../assets/icons/face.svg\";\nimport iconHand from \"../../../assets/icons/hand.svg\";\nimport iconBody from \"../../../assets/icons/body.svg\";\nimport iconFeet from \"../../../assets/icons/feet.svg\"; // Icons paths\n\nconst icons = [iconHair, iconFace, iconHand, iconBody, iconFeet]; // WARNING: currently it will not work to change the language settings \n\nlet treatmentLabels = {\n  eng: ['Hair', 'Face', 'Hands', 'Body', 'Feet'],\n  dk: ['Hår', 'Ansigt', 'Hænder', 'Krop', 'Fødder']\n}; // warning: it will not work to set a different locale (for now)\n// but I am enforcing this idea througout the code, for the future\n\nlet locale = 'dk'; // These are default values. Note: the order matters -\n// it matches the order of the treatments labels arr\n// many months later: but why? seems confusing to declare this array out of context, \n// why dont we create an object with the values instead?\n\nlet treatmentLabelIsActive = [true, true, true, true, true]; // remove after refactoring\n// why not do something like this instead? its less error prone, \n// and way more meaningful just by looking at it! \n\nconst labelData = {\n  hair: {\n    label: treatmentLabels[locale][0],\n    isActive: true,\n    icon: icons[0]\n  },\n  face: {\n    label: treatmentLabels[locale][1],\n    isActive: true,\n    icon: icons[1]\n  },\n  hands: {\n    label: treatmentLabels[locale][2],\n    isActive: true,\n    icon: icons[2]\n  },\n  body: {\n    label: treatmentLabels[locale][3],\n    isActive: true,\n    icon: icons[3]\n  },\n  feet: {\n    label: treatmentLabels[locale][4],\n    isActive: true,\n    icon: icons[4]\n  }\n};\nconsole.log('PRINT STUFF:');\nconsole.log(labelData);\n\nclass SearchFormContainer extends Component {\n  constructor(props) {\n    super(props); // Set the state\n\n    this.state = {\n      // set the default values \n      [labelData['hair'].label]: [labelData['hair'].isActive],\n      [labelData['face'].label]: [labelData['face'].isActive],\n      [labelData['hands'].label]: [labelData['hands'].isActive],\n      [labelData['body'].label]: [labelData['body'].isActive],\n      [labelData['feet'].label]: [labelData['feet'].isActive],\n      from: null,\n      to: null\n    }; // Create a list of labels\n\n    this.labels = Object.keys(this.state).splice(0, 5); // Binders\n\n    this.handleClick = this.handleClick.bind(this);\n    this.handleDateClick = this.handleDateClick.bind(this);\n    this.handleSubmitClick = this.handleSubmitClick.bind(this);\n  } // this handler is triggered when you click on a treatment-icon\n  // and when you click on a treatment-checkbox\n\n\n  handleClick(clickedTreatment) {\n    this.setState({\n      [clickedTreatment]: !this.state[clickedTreatment]\n    });\n  }\n\n  handleDateClick(e) {\n    this.setState({\n      from: e.from,\n      to: e.to\n    });\n  }\n\n  handleSubmitClick() {\n    this.props.getSearchResults(this.state);\n  }\n\n  render() {\n    console.log('this.testLabels');\n    console.log(this.testLabels); // get the checked/unchecked array\n\n    let treatmentIsActiveArr = Object.values(this.state).slice(0, 5); // Get a list of the active labels\n\n    let chosenLabels = formatSelectedLabels(getSelectedLabels(this.state));\n    return /*#__PURE__*/React.createElement(SearchForm // why do we pass the labels array and the and the isCheckedArray?\n    // what if we pass the state object, or create a new nested array,\n    // ir something in the component instead... \n    // pass the labels array\n    , {\n      labels: this.labels // pass the default is checked array\n      ,\n      defValIsChecked: treatmentLabelIsActive // pass the list of icon paths\n      ,\n      icons: icons // pass the method used to get search results\n      ,\n      getSearchResults: this.handleSubmitClick,\n      isActiveArray: treatmentIsActiveArr,\n      onClick: this.handleClick,\n      activeLabels: chosenLabels,\n      fromDate: this.state.from,\n      toDate: this.state.to // Props for DatePicker\n      ,\n      onDatePick: this.handleDateClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 7\n      }\n    });\n  }\n\n}\n\nexport default SearchFormContainer;\n/* \n\n  Helper Functions\n\n*/\n// takes the state object and returns an array,\n// that contains the chosen treatments - \n// treatments with a value of true\n\nconst getSelectedLabels = obj => {\n  // get an array of the components state key/value pars,\n  // this will result in an array of nested arrays\n  // and remove the 'from' and 'to' from the array\n  let objectsKeyValPairsArr = Object.entries(obj).slice(0, 5); // initiate an empty array that will store the selected labels only\n\n  const selectedLabelsArray = []; // loop through the objectsKeyValPairsArr (its an array of arrays)\n\n  objectsKeyValPairsArr.forEach((currentElement, i) => {\n    // in the current element ([<label>],[<isChecked>]),\n    // if isChecked is true   \n    if (currentElement[1]) {\n      // then push the label to the selectedLabelsArray\n      selectedLabelsArray.push(currentElement[0]);\n    }\n\n    ;\n  });\n  return selectedLabelsArray;\n}; // helper function, formatSelectedLabels,\n// takes an array contain the selected labels\n// and returns a new array with the formatted labels\n// for the dropdown component\n\n\nconst formatSelectedLabels = arr => {\n  // create a new array where each element has a space before the string,\n  // if not used, the result is: <label>,<label>,<label>\n  let formattedLabels = arr.map(element => \" \" + element);\n  return formattedLabels;\n};","map":{"version":3,"sources":["/Users/nestos/Desktop/Code/glowspace/src/components/Search/SearchForm/SearchFormContainer.js"],"names":["React","Component","SearchForm","icons","iconHair","iconFace","iconHand","iconBody","iconFeet","treatmentLabels","eng","dk","locale","treatmentLabelIsActive","labelData","hair","label","isActive","icon","face","hands","body","feet","console","log","SearchFormContainer","constructor","props","state","from","to","labels","Object","keys","splice","handleClick","bind","handleDateClick","handleSubmitClick","clickedTreatment","setState","e","getSearchResults","render","testLabels","treatmentIsActiveArr","values","slice","chosenLabels","formatSelectedLabels","getSelectedLabels","obj","objectsKeyValPairsArr","entries","selectedLabelsArray","forEach","currentElement","i","push","arr","formattedLabels","map","element"],"mappings":";AAAA;AAEA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,UAAP,MAAuB,cAAvB,C,CAEA;;;;;;uDAOA;;AACA,MAAMC,KAAK,GAAG,CAAEC,QAAF,EAAYC,QAAZ,EAAsBC,QAAtB,EAAgCC,QAAhC,EAA0CC,QAA1C,CAAd,C,CAEA;;AACA,IAAIC,eAAe,GAAG;AACpBC,EAAAA,GAAG,EAAE,CAAC,MAAD,EAAS,MAAT,EAAiB,OAAjB,EAA0B,MAA1B,EAAkC,MAAlC,CADe;AAEpBC,EAAAA,EAAE,EAAE,CAAC,KAAD,EAAQ,QAAR,EAAkB,QAAlB,EAA4B,MAA5B,EAAoC,QAApC;AAFgB,CAAtB,C,CAKA;AACA;;AACA,IAAIC,MAAM,GAAG,IAAb,C,CAEA;AACA;AACA;AACA;;AACA,IAAIC,sBAAsB,GAAG,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,IAAnB,EAAyB,IAAzB,CAA7B,C,CAA6D;AAC7D;AACA;;AAGA,MAAMC,SAAS,GAAG;AAChBC,EAAAA,IAAI,EAAE;AACJC,IAAAA,KAAK,EAAEP,eAAe,CAACG,MAAD,CAAf,CAAwB,CAAxB,CADH;AAEJK,IAAAA,QAAQ,EAAE,IAFN;AAGJC,IAAAA,IAAI,EAAEf,KAAK,CAAC,CAAD;AAHP,GADU;AAMhBgB,EAAAA,IAAI,EAAE;AACJH,IAAAA,KAAK,EAAEP,eAAe,CAACG,MAAD,CAAf,CAAwB,CAAxB,CADH;AAEJK,IAAAA,QAAQ,EAAE,IAFN;AAGJC,IAAAA,IAAI,EAAEf,KAAK,CAAC,CAAD;AAHP,GANU;AAWhBiB,EAAAA,KAAK,EAAE;AACLJ,IAAAA,KAAK,EAAEP,eAAe,CAACG,MAAD,CAAf,CAAwB,CAAxB,CADF;AAELK,IAAAA,QAAQ,EAAE,IAFL;AAGLC,IAAAA,IAAI,EAAEf,KAAK,CAAC,CAAD;AAHN,GAXS;AAgBhBkB,EAAAA,IAAI,EAAE;AACJL,IAAAA,KAAK,EAAEP,eAAe,CAACG,MAAD,CAAf,CAAwB,CAAxB,CADH;AAEJK,IAAAA,QAAQ,EAAE,IAFN;AAGJC,IAAAA,IAAI,EAAEf,KAAK,CAAC,CAAD;AAHP,GAhBU;AAqBhBmB,EAAAA,IAAI,EAAE;AACJN,IAAAA,KAAK,EAAEP,eAAe,CAACG,MAAD,CAAf,CAAwB,CAAxB,CADH;AAEJK,IAAAA,QAAQ,EAAE,IAFN;AAGJC,IAAAA,IAAI,EAAEf,KAAK,CAAC,CAAD;AAHP;AArBU,CAAlB;AA4BAoB,OAAO,CAACC,GAAR,CAAY,cAAZ;AACAD,OAAO,CAACC,GAAR,CAAYV,SAAZ;;AAEA,MAAMW,mBAAN,SAAkCxB,SAAlC,CAA4C;AAC1CyB,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN,EADiB,CAGjB;;AACA,SAAKC,KAAL,GAAa;AACX;AACA,OAACd,SAAS,CAAC,MAAD,CAAT,CAAkBE,KAAnB,GAA4B,CAACF,SAAS,CAAC,MAAD,CAAT,CAAkBG,QAAnB,CAFjB;AAGX,OAACH,SAAS,CAAC,MAAD,CAAT,CAAkBE,KAAnB,GAA4B,CAACF,SAAS,CAAC,MAAD,CAAT,CAAkBG,QAAnB,CAHjB;AAIX,OAACH,SAAS,CAAC,OAAD,CAAT,CAAmBE,KAApB,GAA4B,CAACF,SAAS,CAAC,OAAD,CAAT,CAAmBG,QAApB,CAJjB;AAKX,OAACH,SAAS,CAAC,MAAD,CAAT,CAAkBE,KAAnB,GAA4B,CAACF,SAAS,CAAC,MAAD,CAAT,CAAkBG,QAAnB,CALjB;AAMX,OAACH,SAAS,CAAC,MAAD,CAAT,CAAkBE,KAAnB,GAA4B,CAACF,SAAS,CAAC,MAAD,CAAT,CAAkBG,QAAnB,CANjB;AAOXY,MAAAA,IAAI,EAAE,IAPK;AAQXC,MAAAA,EAAE,EAAE;AARO,KAAb,CAJiB,CAejB;;AACA,SAAKC,MAAL,GAAcC,MAAM,CAACC,IAAP,CAAY,KAAKL,KAAjB,EAAwBM,MAAxB,CAA+B,CAA/B,EAAkC,CAAlC,CAAd,CAhBiB,CAkBjB;;AACA,SAAKC,WAAL,GAAmB,KAAKA,WAAL,CAAiBC,IAAjB,CAAsB,IAAtB,CAAnB;AACA,SAAKC,eAAL,GAAuB,KAAKA,eAAL,CAAqBD,IAArB,CAA0B,IAA1B,CAAvB;AACA,SAAKE,iBAAL,GAAyB,KAAKA,iBAAL,CAAuBF,IAAvB,CAA4B,IAA5B,CAAzB;AACD,GAvByC,CAyB1C;AACA;;;AACAD,EAAAA,WAAW,CAACI,gBAAD,EAAmB;AAC5B,SAAKC,QAAL,CAAc;AAAE,OAACD,gBAAD,GAAoB,CAAC,KAAKX,KAAL,CAAWW,gBAAX;AAAvB,KAAd;AACD;;AAEDF,EAAAA,eAAe,CAACI,CAAD,EAAI;AACjB,SAAKD,QAAL,CAAc;AACZX,MAAAA,IAAI,EAAEY,CAAC,CAACZ,IADI;AAEZC,MAAAA,EAAE,EAAEW,CAAC,CAACX;AAFM,KAAd;AAID;;AAEDQ,EAAAA,iBAAiB,GAAG;AAClB,SAAKX,KAAL,CAAWe,gBAAX,CAA4B,KAAKd,KAAjC;AACD;;AAEDe,EAAAA,MAAM,GAAG;AACPpB,IAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKoB,UAAjB,EAFO,CAIP;;AACA,QAAIC,oBAAoB,GAAGb,MAAM,CAACc,MAAP,CAAc,KAAKlB,KAAnB,EAA0BmB,KAA1B,CAAgC,CAAhC,EAAkC,CAAlC,CAA3B,CALO,CAOP;;AACA,QAAIC,YAAY,GAAGC,oBAAoB,CAACC,iBAAiB,CAAC,KAAKtB,KAAN,CAAlB,CAAvC;AAEA,wBACE,oBAAC,UAAD,CAEE;AACA;AACA;AAEA;AANF;AAOE,MAAA,MAAM,EAAE,KAAKG,MAPf,CAQE;AARF;AASE,MAAA,eAAe,EAAElB,sBATnB,CAYE;AAZF;AAaE,MAAA,KAAK,EAAEV,KAbT,CAeE;AAfF;AAgBE,MAAA,gBAAgB,EAAE,KAAKmC,iBAhBzB;AAkBE,MAAA,aAAa,EAAEO,oBAlBjB;AAoBE,MAAA,OAAO,EAAE,KAAKV,WApBhB;AAsBE,MAAA,YAAY,EAAEa,YAtBhB;AAwBE,MAAA,QAAQ,EAAE,KAAKpB,KAAL,CAAWC,IAxBvB;AA0BE,MAAA,MAAM,EAAE,KAAKD,KAAL,CAAWE,EA1BrB,CA4BE;AA5BF;AA6BE,MAAA,UAAU,EAAE,KAAKO,eA7BnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAiCD;;AArFyC;;AAwF5C,eAAeZ,mBAAf;AAMA;;;;;AAMA;AACA;AACA;;AACA,MAAMyB,iBAAiB,GAAGC,GAAG,IAAI;AAC/B;AACA;AACA;AACA,MAAIC,qBAAqB,GAAGpB,MAAM,CAACqB,OAAP,CAAeF,GAAf,EAAoBJ,KAApB,CAA0B,CAA1B,EAA4B,CAA5B,CAA5B,CAJ+B,CAM/B;;AACA,QAAMO,mBAAmB,GAAG,EAA5B,CAP+B,CAS/B;;AACAF,EAAAA,qBAAqB,CAACG,OAAtB,CAA+B,CAACC,cAAD,EAAiBC,CAAjB,KAAuB;AACpD;AACA;AACA,QAAGD,cAAc,CAAC,CAAD,CAAjB,EAAsB;AACpB;AACAF,MAAAA,mBAAmB,CAACI,IAApB,CAAyBF,cAAc,CAAC,CAAD,CAAvC;AACD;;AAAA;AACF,GAPD;AASA,SAAOF,mBAAP;AACD,CApBD,C,CAsBA;AACA;AACA;AACA;;;AACA,MAAML,oBAAoB,GAAGU,GAAG,IAAI;AAClC;AACA;AACA,MAAIC,eAAe,GAAGD,GAAG,CAACE,GAAJ,CAASC,OAAO,IAAI,MAAMA,OAA1B,CAAtB;AAEA,SAAOF,eAAP;AACD,CAND","sourcesContent":["// SearchFormContainer.js\n\nimport React, { Component } from \"react\";\nimport SearchForm from './SearchForm';\n\n// Import the icons\nimport iconHair from '../../../assets/icons/hair.svg';\nimport iconFace from '../../../assets/icons/face.svg';\nimport iconHand from '../../../assets/icons/hand.svg';\nimport iconBody from '../../../assets/icons/body.svg';\nimport iconFeet from '../../../assets/icons/feet.svg';\n\n// Icons paths\nconst icons = [ iconHair, iconFace, iconHand, iconBody, iconFeet ];\n\n// WARNING: currently it will not work to change the language settings \nlet treatmentLabels = {\n  eng: ['Hair', 'Face', 'Hands', 'Body', 'Feet'],\n  dk: ['Hår', 'Ansigt', 'Hænder', 'Krop', 'Fødder'],\n}\n\n// warning: it will not work to set a different locale (for now)\n// but I am enforcing this idea througout the code, for the future\nlet locale = 'dk';\n\n// These are default values. Note: the order matters -\n// it matches the order of the treatments labels arr\n// many months later: but why? seems confusing to declare this array out of context, \n// why dont we create an object with the values instead?\nlet treatmentLabelIsActive = [true, true, true, true, true]; // remove after refactoring\n// why not do something like this instead? its less error prone, \n// and way more meaningful just by looking at it! \n\n\nconst labelData = {\n  hair: {\n    label: treatmentLabels[locale][0],\n    isActive: true,\n    icon: icons[0],\n  },\n  face: {\n    label: treatmentLabels[locale][1],\n    isActive: true,\n    icon: icons[1],\n  },\n  hands: {\n    label: treatmentLabels[locale][2],\n    isActive: true,\n    icon: icons[2],\n  },\n  body: {\n    label: treatmentLabels[locale][3],\n    isActive: true,\n    icon: icons[3],\n  },\n  feet: {\n    label: treatmentLabels[locale][4],\n    isActive: true,\n    icon: icons[4],\n  },\n}\n\nconsole.log('PRINT STUFF:');\nconsole.log(labelData);\n\nclass SearchFormContainer extends Component {\n  constructor(props) {\n    super(props);\n\n    // Set the state\n    this.state = {\n      // set the default values \n      [labelData['hair'].label]:  [labelData['hair'].isActive],\n      [labelData['face'].label]:  [labelData['face'].isActive],\n      [labelData['hands'].label]: [labelData['hands'].isActive],\n      [labelData['body'].label]:  [labelData['body'].isActive],\n      [labelData['feet'].label]:  [labelData['feet'].isActive],\n      from: null,\n      to: null, \n    }\n\n    // Create a list of labels\n    this.labels = Object.keys(this.state).splice(0, 5);\n\n    // Binders\n    this.handleClick = this.handleClick.bind(this);\n    this.handleDateClick = this.handleDateClick.bind(this);\n    this.handleSubmitClick = this.handleSubmitClick.bind(this);\n  }\n\n  // this handler is triggered when you click on a treatment-icon\n  // and when you click on a treatment-checkbox\n  handleClick(clickedTreatment) {\n    this.setState({ [clickedTreatment]: !this.state[clickedTreatment] });\n  }\n\n  handleDateClick(e) {\n    this.setState({\n      from: e.from,\n      to: e.to\n    });\n  }\n\n  handleSubmitClick() {\n    this.props.getSearchResults(this.state); \n  }\n\n  render() {\n    console.log('this.testLabels')\n    console.log(this.testLabels)\n\n    // get the checked/unchecked array\n    let treatmentIsActiveArr = Object.values(this.state).slice(0,5)\n\n    // Get a list of the active labels\n    let chosenLabels = formatSelectedLabels(getSelectedLabels(this.state));\n\n    return(\n      <SearchForm\n        \n        // why do we pass the labels array and the and the isCheckedArray?\n        // what if we pass the state object, or create a new nested array,\n        // ir something in the component instead... \n        \n        // pass the labels array\n        labels={this.labels}\n        // pass the default is checked array\n        defValIsChecked={treatmentLabelIsActive}\n\n\n        // pass the list of icon paths\n        icons={icons}\n\n        // pass the method used to get search results\n        getSearchResults={this.handleSubmitClick}\n\n        isActiveArray={treatmentIsActiveArr}\n\n        onClick={this.handleClick}\n\n        activeLabels={chosenLabels}\n\n        fromDate={this.state.from} \n\n        toDate={this.state.to}\n\n        // Props for DatePicker\n        onDatePick={this.handleDateClick} \n      />\n    )\n  }\n}\n\nexport default SearchFormContainer;\n\n\n\n\n\n/* \n\n  Helper Functions\n\n*/\n\n// takes the state object and returns an array,\n// that contains the chosen treatments - \n// treatments with a value of true\nconst getSelectedLabels = obj => {\n  // get an array of the components state key/value pars,\n  // this will result in an array of nested arrays\n  // and remove the 'from' and 'to' from the array\n  let objectsKeyValPairsArr = Object.entries(obj).slice(0,5)\n\n  // initiate an empty array that will store the selected labels only\n  const selectedLabelsArray = [];\n\n  // loop through the objectsKeyValPairsArr (its an array of arrays)\n  objectsKeyValPairsArr.forEach( (currentElement, i) => {\n    // in the current element ([<label>],[<isChecked>]),\n    // if isChecked is true   \n    if(currentElement[1]) {\n      // then push the label to the selectedLabelsArray\n      selectedLabelsArray.push(currentElement[0])\n    };\n  });\n\n  return selectedLabelsArray;\n};\n\n// helper function, formatSelectedLabels,\n// takes an array contain the selected labels\n// and returns a new array with the formatted labels\n// for the dropdown component\nconst formatSelectedLabels = arr => {\n  // create a new array where each element has a space before the string,\n  // if not used, the result is: <label>,<label>,<label>\n  let formattedLabels = arr.map( element => \" \" + element);\n\n  return formattedLabels;\n};\n\n"]},"metadata":{},"sourceType":"module"}